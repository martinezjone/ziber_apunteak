{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Zibersegurtasuna Web Garapenean","text":"<p>Ongi etorri Web Garapenerako Zibersegurtasunaren apunteetara. Material honek segurtasun informatikoaren oinarrizko kontzeptuak eta praktika onenak lantzen ditu web garapenean. FROGA</p>"},{"location":"#ikastaroaren-egitura","title":"Ikastaroaren Egitura","text":""},{"location":"#1-oinarriak-eta-mehatxu-arruntak","title":"1. Oinarriak eta mehatxu arruntak","text":"<ul> <li>Web Garapenean Zibersegurtasunaren Sarrera</li> <li>Webaren funtzionamenduaren oinarriak</li> <li>Web Hacking-erako sarrera</li> </ul>"},{"location":"#2-owasp-top-10","title":"2. OWASP Top 10","text":"<ul> <li>Aurkezpena (OWASP Top 10)</li> <li>Broken Access Control</li> <li>Cryptographic Failures</li> <li>Injection</li> <li>Insecure Design</li> <li>Security Misconfiguration</li> <li>Vulnerable and Outdated Components</li> <li>Identification and Authentication Failures</li> <li>Software and Data Integrity Failures</li> <li>Security Logging and Monitoring Failures</li> <li>Server-Side Request Forgery</li> </ul>"},{"location":"#3-eraso-eta-defentsa-oinarrizkoak","title":"3. Eraso eta defentsa oinarrizkoak","text":"<ul> <li>Injekzioen aurkako defentsak</li> <li>Autentifikazio eta saioen segurtasuna</li> <li>Sarbide-kontrola eta konfigurazio segurua</li> </ul>"},{"location":"#nola-erabili-apunte-hauek","title":"Nola erabili apunte hauek","text":"<ul> <li>Erabili ezkerreko menua gai desberdinetara sartzeko.</li> <li>Gai bakoitzean teoria eta adibide praktikoak aurkituko dituzu.</li> <li>Kode adibideak nabarmenduta daude irakurgarritasuna hobetzeko.</li> </ul>"},{"location":"#baliabide-gehigarriak","title":"Baliabide Gehigarriak","text":"<ul> <li>OWASP</li> <li>OWASP Top 10</li> <li>OWASP Cheat Sheet Series</li> <li>OWASP Euskal Herria</li> </ul> <p>OWASP Juice Shop</p> <ul> <li> <p>OWASP Juice Shop </p> </li> <li> <p>Juice Shop</p> </li> </ul>"},{"location":"#hiztegi-teknikoa","title":"Hiztegi Teknikoa","text":"Euskaraz Gazteleraz Ingeleraz Zibersegurtasuna Ciberseguridad Cybersecurity Webgunea Sitio web Website Zerbitzaria Servidor Server Bezeroa Cliente Client Saioa Sesi\u00f3n Session Autentifikazioa Autenticaci\u00f3n Authentication Baimena Autorizaci\u00f3n Authorization Zifratzea Cifrado Encryption Ahultasuna Vulnerabilidad Vulnerability Mehatxua Amenaza Threat"},{"location":"ariketak/broken_access_control/","title":"Broken Access Control - Erronkak","text":"<p>Sistema informatiko gehienak hainbat erabiltzailerekin erabiltzeko diseinatuta daude. Pribilegioak erabiltzaile batek egin dezakeena esan nahi du. Pribilegio arrunten artean daude fitxategiak ikustea eta editatzea, edo sistemako fitxategiak aldatzea.</p> <p>Pribilegioen gorakadak esan nahi du erabiltzaile batek eskubidea ez duten pribilegioak jasotzen dituela. Pribilegio horiek fitxategiak ezabatzeko, informazio pribatua ikusteko edo nahi ez diren programak (adibidez, birusak) instalatzeko erabil daitezke. Normalean, sistema batek segurtasuna saihesteko aukera ematen duen akats bat duenean gertatzen da, edo, bestela, erabiltzeko moduari buruzko diseinu-hipotesi akastunak dituenean.</p>"},{"location":"ariketak/broken_access_control/#erronkak","title":"Erronkak","text":""},{"location":"ariketak/broken_access_control/#1-erronka-miscellaneous-score-board","title":"1. erronka: Miscellaneous &gt; Score Board","text":"<pre><code>Find the carefully hidden 'Score Board' page.\n\nHau izan beharko da gure lehengo ariketa. Score Borad atalean topatuko bait ditugu gainontzeko ariketak.\n</code></pre>"},{"location":"ariketak/broken_access_control/#2-erronka-whats-the-administrators-email-address","title":"2. erronka: What's the Administrator's email address?","text":"<pre><code>Saiatuko dugu admin erabiltzailearen emaila topatzen.\n</code></pre>"},{"location":"ariketak/broken_access_control/#3-erronka-what-parameter-is-used-for-searching","title":"3. erronka: What parameter is used for searching?","text":"<pre><code>Bilaketa bat egiterakoan, zein da kontsultan erabilitako parametroa?\n</code></pre>"},{"location":"ariketak/broken_access_control/#4-erronka-access-the-administration-section-of-the-store","title":"4. erronka: Access the administration section of the store","text":"<pre><code>Score-board-ekin gertatu den bezala, ez dugu administrazio atalera sartzeko esteka zuzena. Guk aurkitu beharko dugu. Hainbat aukera egon daitezke atala topatzeko.\n\nHau egiteko SQL injection pixkatxo bat ikusi behar dugu.\n</code></pre>"},{"location":"ariketak/broken_access_control/#estekak","title":"Estekak","text":"<ul> <li>OWASP Broken Access Control</li> <li>PortSwigger - Access Control Vulnerabilities</li> </ul> <p>\u2190 Atzera bueltatu OWASP Top 10-ra</p>"},{"location":"ariketak/cryptographic_failures/","title":"Cryptographic Failures","text":"<p>Lehenik eta behin, iragaitzazko eta atsedeneko datuen babes-beharrak zehaztu behar dira. Adibidez, pasahitzek, kreditu txartelen zenbakiek, osasun erregistroek, informazio pertsonalak eta negozio sekretuek aparteko babesa behar dute, batez ere datu horiek pribatutasun legeetan sartzen badira.</p> <p>Datu horiengatik guztiengatik:</p> <ul> <li> <p>Testu argian transmititzen al da daturen bat? Honek HTTP, SMTP, FTP bezalako protokoloei eragiten die. Interneteko kanpoko trafikoa oso arriskutsua da. Barne-trafiko guztia egiaztatzea, adibidez, karga-orekatzaileen, web-zerbitzarien edo back-end sistemen artean.</p> </li> <li> <p>Algoritmo edo protokolo kriptografiko zahar edo ahulen bat erabiltzen da, bai lehenespenez, bai kode zaharragoan?</p> </li> <li> <p>Erabiltzen ari diren kriptografia-gako lehenetsiak, sortutako edo berrerabilitako kriptografia-gako ahulak, edo gakoen kudeaketa edo errotazio egokia falta dira? Kriptografia-gakoak iturburu-kodeen biltegietan aztertzen dira?</p> </li> <li> <p>Enkriptatzea ez da derrigortzen, adibidez, HTTP goiburukoak (nabigatzailea) segurtasun-direktibak edo goiburuak falta dira?</p> </li> <li> <p>Jasotako zerbitzari-ziurtagiria eta konfiantza-katea behar bezala baliozkotuta daude?</p> </li> <li> <p>Etab...</p> </li> </ul>"},{"location":"ariketak/cryptographic_failures/#erronkak","title":"Erronkak","text":""},{"location":"ariketak/cryptographic_failures/#1-erronka-confidential-document","title":"1. erronka: Confidential Document","text":"<p>Access a confidential document. Saiatuko dugu dokumentu konfidentzial bat topatzen, horretarako begirada bat botako genuke privacy, about us eta horrelakoetan, ezta? </p>"},{"location":"ariketak/cryptographic_failures/#2-erronka-sensitive-data-exposure-exposes-credentials","title":"2. erronka: Sensitive Data Exposure &gt; Exposes credentials","text":"<p>A developer was careless with hardcoding unused, but still valid credentials for a testing account on the client-side.</p>"},{"location":"ariketak/cryptographic_failures/#estekak","title":"Estekak","text":"<ul> <li>OWASP Cryptographic Failures</li> <li>OWASP Cryptographic Storage Cheat Sheet</li> </ul> <p>\u2190 Atzera bueltatu OWASP Top 10-ra</p>"},{"location":"ariketak/identification_authentication_failures/","title":"Identification and Authentication Failures","text":"<p>Erabiltzaile-identifikazio eta autentifikazioaren porrotak gertatzen dira hauek ez direlako behar bezala inplementatzen (pasahitz politika ahulak, sesioen kudeaketa txarra, MFA falta...). Hauek erabiltzaile suplantazioa, saio gehiegikeriak edo baimen-gorakadak ekar ditzakete.</p>"},{"location":"ariketak/identification_authentication_failures/#adibideak","title":"Adibideak:","text":"<p>Autentifikazio-eraso gehienak pasahitzak faktore bakar gisa erabiltzeagatik gertatzen dira. Pasahitzen errotazioa eta konplexutasuna eskatzen duten jardunbide egokienak erabiltzaileen pasahitz ahulak erabiltzea eta biltzea sustatzen duten jardueratzat hartzen dira.</p>"},{"location":"ariketak/identification_authentication_failures/#prebentsioa","title":"Prebentsioa","text":"<p>Ahal denean, inplika ezazu faktore anitzeko autentifikazioa, kredentzial ezagunak berrerabiltzeko eraso automatizatuak, indar gordina eta lapurtutako kredentzialen bilketa saihesteko.</p> <p>Ez sartu edo inplika zure softwarean kredentzial lehenetsiak, batez ere erabiltzaile administratzaileentzat.</p> <p>Pasahitz ahulen aurkako kontrola ezarri.</p>"},{"location":"ariketak/identification_authentication_failures/#erronkak","title":"Erronkak","text":""},{"location":"ariketak/identification_authentication_failures/#estekak","title":"Estekak","text":"<ul> <li>OWASP Identification and Authentication Failures</li> </ul>"},{"location":"ariketak/injection/","title":"Injection","text":"<p>Datu ez-fidagarriak interprete bati bidaltzen zaizkionean gertatzen dira injekzioak, komando edo kontsulta baten parte gisa. Kategoria hau OWASP Top 10 2021eko hirugarren postuan dago.</p> <p>Injekzio-erasoen arriskua web-aplikazioen segurtasunerako mehatxu nagusienetako bat da. Eraso mota honetan, erasotzaileak datu maltzurrak txertatzen ditu aplikazio batek interpretatzen dituen kontsulta edo komando baten barruan. Erasotzailearen helburua ez da bakarrik datuak sartzea, baizik eta aplikazioaren portaera kontrolatzea, datu-baseko informazioa lapurtzeko edo sistema osoa kaltetzeko.</p> <p>Funtsean, garatzaile batek erabiltzailearen sarrera \"datu\" gisa tratatu beharrean, \"kode\" gisa tratatzen duenean gertatzen da.</p>"},{"location":"ariketak/injection/#injekzio-mota","title":"Injekzio mota","text":""},{"location":"ariketak/injection/#sql-injekzioa","title":"SQL Injekzioa","text":"<p>Hau da eraso-motarik hedatuena eta larriena. Gehienetan, SQL kontsultak sortzeko kate-manipulazioa erabiltzean gertatzen da.</p> <p>Kode Ahula (Vulnerable Code):</p> <pre><code>    // Erabiltzailearen sarrera eskuratu\n    $username = $_POST['username'];\n\n    // Kode ahula: sarrera zuzenean kontsultan sartzen da\n    $sql_query = \"SELECT * FROM users WHERE username = '\" . $username . \"'\";\n\n    // Exekutatu kontsulta\n    $result = $pdo-&gt;query($sql_query);\n</code></pre> <p>Erasoaren Eszenatokia:</p> <pre><code>Erasotzaileak sarrera hau sartzen du: ' OR 1=1 --\n\nGaratzailearen kodea kontsulta honetan bilakatzen da:\nSELECT * FROM users WHERE username = '' OR 1=1 --';\n\nKontsultaren bigarren zatia (OR 1=1) beti TRUE denez, datu-baseak pasahitza balioztatu gabe onartzen du. Gainera, -- karaktereak gainerako kontsulta (kasu honetan ';') komentario gisa tratatzen du.\n</code></pre> <p>Prebentsioa:</p> <p>Adibide hauetan, ahultasuna erabiltzailearen sarrera zuzenean SQL kontsultaren testuan kateatzean zegoen. Hori da errotik saihestu behar dena.</p> <p>Garatzaileek egin behar duten gauzarik garrantzitsuena kontsulta parametrizatuak (edo Prepared Statements) erabiltzea da, horretarako PDOren funtzionalitate nagusiak prepare() eta execute() metodoak dira. </p> <pre><code>    // 1. Kontsulta prestatu, oraingoan izeneko markatzaile bat erabiliz\n    $sql_query = \"SELECT * FROM users WHERE username = :username\";\n    $stmt = $pdo-&gt;prepare($sql_query);\n\n    // 2. Balioa lotu parametroari\n    // :username markatzailea $username aldagaiari lotzen da\n    $stmt-&gt;bindParam(':username', $username);\n\n    // 3. Exekutatu kontsulta, parametrorik gabe\n    $stmt-&gt;execute();\n\n    // Oharra: $username aldagaia exekuzioan lotzen da\n</code></pre>"},{"location":"ariketak/injection/#os-injekzioa","title":"OS Injekzioa","text":"<p>Eraso honetan, garatzaileak erabiltzailearen sarrera zuzenean bidaltzen dio zerbitzariaren shell-ari, shell_exec, system edo exec bezalako funtzioak erabiliz.</p> <p>Kode Ahula (Vulnerable Code):</p> <pre><code>    // Erabiltzaileak igotako fitxategiaren izena eskuratu\n    $file_name = $_GET['file_name'];\n\n    // Kode ahula: 'convert' komandoari erabiltzailearen sarrera zuzenean pasatuz\n    exec(\"convert \" . $file_name . \" -resize 200x200 thumb_\".$file_name);\n</code></pre> <p>Erasoaren Eszenatokia:</p> <pre><code>Garatzaileak pentsatzen du erabiltzaileak argazkia.jpg bezalako fitxategi-izen bat sartuko duela. Baina erasotzaile batek erabili dezake:\n\nSarrera maltzurra: ; rm -rf /\n\nExekutatuko litzatekeen komandoa: convert ; rm -rf / -resize 200x200 thumb_\n\nOndorioa: convert komandoaren ondoren, sistemak rm -rf / komandoa exekutatuko luke, eta zerbitzarian kalte handiak eragingo lituzke.\n</code></pre> <p>Prebentsioa: Honen aurkako irtenbide segurua da ez erabiltzea exec bezalako funtzioak, baizik eta irudiak prozesatzeko liburutegi espezializatuak erabiltzea, hala nola PHPko GD edo Imagick, edo Python-eko Pillow. Horiek, kodearen bidez prozesatzen dute irudia, eta ez dute shell-ik erabiltzen, seguruagoa bihurtuz.</p> <p>Garatzaile baten ikuspegitik, OS Injekzioa ekiditeko arau nagusia oso sinplea da: ez exekutatu inoiz shell komandorik erabiltzailearen sarrerarekin. Hori egitea beti da arriskutsua.</p>"},{"location":"ariketak/injection/#nosql-injekzioa","title":"NoSQL Injekzioa","text":"<p>Injekzio mota hau NoSQL datu-baseak (adibidez, MongoDB) erabiltzen dituzten aplikazioetan gertatzen da. SQL Injekzioaren antzekoa da, baina erasotzaileak kontsulten egitura manipulatzen du JSON edo JavaScript objektuetan oinarritutako sintaxia erabiliz.</p> <p>Kode Ahula (Vulnerable Code):</p> <pre><code>    // Erabiltzaileak bidalitako logineko datuak\n    const { username, password } = req.body;\n\n    // Kode ahula: bilaketa-objektua zuzenean erabiltzailearen sarrerarekin eraikitzen da\n    db.collection('users').findOne({ username: username, password: password }, (err, user) =&gt; {\n    // ... login logika\n    });\n</code></pre> <p>Erasoaren Eszenatokia:</p> <p>Erasotzaileak sarrera hau bidaltzen du:</p> <pre><code>    username: 'admin'\n    password: { \"$ne\": null } ( hau da, password ez da nulua)\n</code></pre> <p>Garatzailearen kodeak kontsulta honetan bilakatzen du:</p> <pre><code>    db.collection('users').findOne({ username: 'admin', password: { \"$ne\": null } }, ...);\n</code></pre> <p>Ondorioa: password eremua beti true denez, erasotzaileak pasahitza jakin gabe admin erabiltzailearekin saioa hastea lortzen du.</p> <p>Prebentsioa: Erabili liburutegiak: NoSQL liburutegiak daude injekzioak ekiditen laguntzen dutenak, adibidez, MongoDB-n, sarrerak garbitu ditzakezu kontsultak sortu aurretik.</p> <p>Saihestu kate-konkatenazioak: Biderik onena ez da inoiz kontsulta-objektuak testuz eraikitzea.</p>"},{"location":"ariketak/injection/#xml-injekzioa","title":"XML Injekzioa","text":"<p>Eraso honek XML datuak prozesatzen dituzten aplikazioei eragiten die. Erasotzaileak kode maltzurra txertatzen du XML fitxategi batean, XML-a aztertzen duen motorra manipulatzeko, batez ere XXE (XML External Entity) entitateen bidez.</p> <p>Kode Ahula (Vulnerable Code):</p> <pre><code>    // Erabiltzailearen sarrerarekin XML dokumentua prozesatu\n    DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n    DocumentBuilder builder = factory.newDocumentBuilder();\n    Document doc = builder.parse(new File(request.getParameter(\"xml_file\")));\n</code></pre> <p>Erasoaren Eszenatokia:</p> <p>Erasotzaileak XML fitxategi honen edukia bidaltzen du:</p> <pre><code>    &lt;!DOCTYPE foo [ &lt;!ENTITY xxe SYSTEM \"file:///etc/passwd\"&gt; ]&gt;\n    &lt;foo&gt;&amp;xxe;&lt;/foo&gt;\n</code></pre> <p>Ondorioa: XML irakurgailuak file:///etc/passwd fitxategia irekiko du, eta sistemaren erabiltzaileen informazio sentikorra erakutsiko du. Hau datu-filtrazio larria da.</p> <p>Prebentzioa:</p> <ul> <li> <p>Desgaitu entitateak: </p> <p>Baimenik gabe kanpoko entitateak kargatzea desgaitzea da metodo eraginkorrena. Liburutegi moderno gehienek XXEren prebentzioa lehenespenez aktibatzen dute.</p> </li> <li> <p>Erabili liburutegi seguruak: </p> <p>Ziurtatu XML prozesatzeko liburutegi bertsio eguneratuak erabiltzen dituzula, segurtasun-akats ezagunak konpondu dituztenak.</p> </li> </ul>"},{"location":"ariketak/injection/#ldap-injekzioa","title":"LDAP Injekzioa","text":"<p>LDAP injekzioak LDAP zerbitzariak (adibidez, Active Directory) dituzten aplikazioei eragiten die. Erasotzaileak LDAP-aren sintaxi bereziak erabiliz (adibidez, *, (, |), aplikazioaren autentifikazio- edo bilaketa-kontsulta manipulatzen du.</p> <p>LDAP zerbitzaria (Lightweight Directory Access Protocol) sareko direktorio-zerbitzu bat da, datuak antolatzeko eta eskuratzeko diseinatuta dagoena.</p> <p>Kode Ahula (Vulnerable Code):</p> <pre><code>    // Erabiltzailearen sarrera eskuratu\n    String username = request.getParameter(\"username\");\n\n    // Kode ahula: sarrera zuzenean LDAP kontsultan gehitzen da\n    String filter = \"(&amp;(uid=\" + username + \")(userPassword=*))\";\n    DirContext ctx = new InitialDirContext();\n    ctx.search(\"ou=users,dc=example,dc=com\", filter, searchControls);\n</code></pre> <p>Erasoaren Eszenatokia:</p> <ul> <li> <p>Erasotzaileak sarrera hau sartzen du: *)</p> </li> <li> <p>Garatzailearen kodeak kontsulta honetan bilakatzen du: (&amp;(uid=) (userPassword=))</p> </li> <li> <p>Ondorioa: Kontsulta honek pasahitza kontuan hartu gabe edozein erabiltzailerekin bat egiten du, eta horri esker erasotzaileak edozein kontutan saioa has dezake.</p> </li> </ul> <p>Prebentzioa:</p> <ul> <li>Sarrera baliozkotzea eta ihes-sekuentziak: Ziurtatu sarrerak karaktere baimenduak soilik dituela (adibidez, alfanumerikoak). Edozein karaktere berezi (), (, |) ihes-sekuentzia batekin ordezkatu behar da, interpretatu ez dadin.</li> </ul>"},{"location":"ariketak/injection/#defense-in-depth-defentsa-sakonean","title":"Defense in Depth (Defentsa Sakonean)","text":"<p>\"Defentsa sakonean\" zibersegurtasun-printzipio bat da, eta ez du konfiantza guztia segurtasun-geruza bakar batean jartzen. Horren ordez, sistema edo aplikazio bat babesteko hainbat geruza (edo defentsa) erabiltzea proposatzen du. Horrela, erasotzaile batek defentsa bat gainditzen badu ere, beste bat topatuko du.</p> <p>Printzipio honen helburua da inork ezin duela segurtasun-geruza bat %100ean fidagarria dela ziurtatu, eta, beraz, geruza gehigarriak jartzen dira, badaezpada.</p> <p>** Adibidez: **</p> <pre><code>1. Geruza: Sarrera-balidazio ahula edo ezabatua\n\nBatzuetan, garatzaileek balidazio sinple bat soilik erabiltzen dute, adibidez, erabiltzailearen izena 10 karakterekoa dela egiaztatzea. Honek ez ditu karaktere arriskutsuak gelditzen, hala nola komillak edo koma eta puntu. Horrela, eraso bat gertatzeko aukera oso handia da, lehenengo geruza hau ahula baita.\n\n2. Geruza: Kontsulta Parametrizatuak (Soluzio Indartsuena)\n\nKontsulta parametrizatuek datuak eta kodea guztiz bereizten dituzte. Beraz, nahiz eta erasotzaile batek datu arriskutsuak sartu, datu-baseak datu soil gisa tratatzen ditu, eta ez du haien kodea exekutatzen. Hau da gure defentsa-lerro nagusia eta sendoena, eta beti aplikatu behar da.\n\n3. Geruza: Pribilegio Minimoak (Kaltea Murriztea)\n\nDemagun erasotzaileak lehenengo bi geruzak gainditzea lortu duela. Segurtasun-neurri gehigarririk gabe, datu-base osoa suntsitu edo lapurtu lezake. Baina gure aplikazioak datu-basearekin konektatzeko erabiltzen duen erabiltzaileak pribilegio minimoak baditu, adibidez, bakarrik datuak irakurtzeko baimena badu, DROP TABLE bezalako komando bat exekutatzeko saiakerak porrot egingo du. Geruza honek erasoaren ondorioak mugatzen ditu.\n</code></pre>"},{"location":"ariketak/injection/#erronkak","title":"Erronkak","text":""},{"location":"ariketak/injection/#1-erronka-login-bender","title":"1. erronka: Login Bender","text":"<p>Log in with Bender's user account.</p>"},{"location":"ariketak/injection/#2-erronka-login-jim","title":"2. erronka: Login Jim","text":"<p>Log in with Jim's user account.</p>"},{"location":"ariketak/injection/#3-erronka-database-schema","title":"3. erronka: Database Schema","text":"<p>Exfiltrate the entire DB schema definition via SQL Injection</p>"},{"location":"ariketak/injection/#4-erronka-dom-xss","title":"4. erronka: DOM XSS","text":"<p>Perform a DOM XSS attack with: <code>&lt;iframe src=\"javascript:alert(</code>xss<code>)\"&gt;</code></p>"},{"location":"ariketak/injection/#5-erronka-christmas-special","title":"5. erronka: Christmas Special","text":"<p>Order the Christmas special offer of 2014.</p>"},{"location":"ariketak/injection/#6-erronka-ephemeral-accountant","title":"6. erronka: Ephemeral Accountant","text":"<p>Log in with the (non-existing) accountant acc0unt4nt@juice-sh.op without ever registering that user.</p>"},{"location":"ariketak/injection/#estekak","title":"Estekak","text":"<ul> <li>OWASP Injection</li> <li>OWASP SQL Injection Prevention Cheat Sheet</li> </ul>"},{"location":"ariketak/insecure_design/","title":"Insecure Design","text":"<p>Diseinu edo arkitektura-aldean falta diren edo txarto diseinatutako kontrolak sortzen dituzten ahultasun multzoari deritzo. Ez da bakarrik kode-errore bat; arazoaren sustraia da beharrezko segurtasun-kontrolak ez ezartzea proiektuaren hasieran (threat modeling, segurtasun-arkitektura, business risk profiling). Horren ondorioz, \u201cperfektuki\u201d inplementatutako kodeak ere huts egin dezake, baldin eta diseinuak ez baditu arrisku batzuk kontuan hartzen. </p>"},{"location":"ariketak/insecure_design/#zergatik-garrantzitsua-da","title":"Zergatik garrantzitsua da?","text":"<p>Diseinu-ikasketa txarrak edo definizio gabeziak ekarri ohi dituzte kontrol erabilgarri gutxirekin edo kontrabezaleen aurkako neurri egoki gabe.</p> <p>Arazo hauen konponbidea ez da beti \u201cpatch\u201d lokal bat; normalean diseinuaren aldaketa edo arkitektura-hausnarketa behar izaten da. </p>"},{"location":"ariketak/insecure_design/#adibideak","title":"Adibideak:","text":"<ul> <li>Business logic flaws \u2014 e.g., ordainketa logika okerra (grup-txartelen muga gainditu daiteke).</li> <li>Lack of rate-limiting / anti-bot design \u2014 skalpers edo bot-ak erosketak masiboki egitea.</li> <li>Insecure recovery/workflow \u2014 pasahitzaren berreskurapena galderetan oinarritzen bada.</li> <li>Missing threat model for critical flows \u2014 autentikazio, ordainketa, rol- eta pribilegio-fluxuak ez aztertuak. </li> </ul>"},{"location":"ariketak/insecure_design/#prebentsioa","title":"Prebentsioa","text":"<ul> <li>Integratu threat modeling: proiektuaren lehen faseetan eta user story bakoitzean. Identify datu sentikorren fluxuak eta arriskuak. </li> <li>Design patterns eta paved road: erabili liburutegi seguruenak eta eredu skeletorik onak; ez inventatu berriro egiazko ereduak. </li> <li>Segregate tenants / segregate tiers: isolatu datu eta zerbitzu kritikoak.</li> <li>Plausibility checks eta business rules in each tier: ez fidatu bakarrik client-side checks; egiaztatu beti server-side.</li> <li>Unit/integration tests target: idatzi testak misuse-cases (no solo happy paths).</li> <li>Plan resource &amp; budget for security activities: (design reviews, threat model sessions, periodic re-evaluation). </li> </ul>"},{"location":"ariketak/insecure_design/#erronkak","title":"Erronkak","text":""},{"location":"ariketak/insecure_design/#1-erronka-improper-input-validation-missing-encoding","title":"1. erronka: Improper Input Validation &gt; Missing Encoding","text":"<p>Retrieve the photo of Bjoern's cat in \"melee combat-mode\".</p>"},{"location":"ariketak/insecure_design/#2-erronka-improper-input-validation-repetitive-registration","title":"2. erronka: Improper Input Validation &gt; Repetitive Registration","text":"<p>Follow the DRY principle while registering a user.</p>"},{"location":"ariketak/insecure_design/#3-erronka-improper-input-validation-zero-stars","title":"3. erronka: Improper Input Validation &gt; Zero Stars","text":"<p>Give a devastating zero-star feedback to the store.</p>"},{"location":"ariketak/insecure_design/#4-erronka-improper-input-validation-empty-user-registration","title":"4. erronka: Improper Input Validation &gt; Empty User Registration","text":"<p>Register a user with an empty email and password.</p>"},{"location":"ariketak/insecure_design/#5-erronka-improper-input-validation-admin-registration","title":"5. erronka: Improper Input Validation &gt; Admin Registration","text":"<p>Register as a user with administrator privileges.</p>"},{"location":"ariketak/insecure_design/#estekak","title":"Estekak","text":"<ul> <li>OWASP Insecure Design</li> <li>Principios de Dise\u00f1o Seguros</li> <li>Garatzaileek softwarea egiaztatzeko gutxieneko estandarrei buruzko jarraibideak  </li> </ul>"},{"location":"ariketak/security_logging_monitoring_failures/","title":"Security Logging and Monitoring Failures","text":"<p>Aplikazioek ez badituzte behar adina erregistro eta monitorizazio egiten, zaila da erasoak detektatu eta azkar erantzutea. Horrek erraztu egiten du erasotzaileek euren jarduerak ezkutuan mantentzea. </p>"},{"location":"ariketak/security_logging_monitoring_failures/#adibideak","title":"Adibideak:","text":"<p>Haurrentzako plan bat hornitzen duen osasun-emaile baten webguneak ezin izan zuen arrakala bat antzeman, monitorizazio eta erregistro faltagatik. Kanpoko norbaitek zerbitzu-emaileari jakinarazi zionez, erasotzaile batek 3,5 milioi haur baino gehiagoren osasun-erregistro sentikorrak eskuratu eta aldatu zituen. Gertaera osteko berrikuspen batek detektatu zuen webgunearen garatzaileek ez zutela ahulezia nabarmenik aurkitu.</p>"},{"location":"ariketak/security_logging_monitoring_failures/#prebentsioa","title":"Prebentsioa","text":"<p>Egoki monitorizatzeko, derrigorrezkoa da segurtasun-gertaerak (login hutsak, eskakizun arraroak, baimen-erroreak...) log fitxategietan grabatzea eta horiek etengabe gainbegiratzea.</p> <p>Ziurtatu saioa hasteko, sarbidea kontrolatzeko eta zerbitzariaren aldeko datu-sarrerak baliozkotzeko akats guztiak nahikoa testuinguruarekin erregistra daitezkeela kontu susmagarriak edo maltzurrak identifikatzeko eta behar adina denboran mantentzeko, ondoren analisi forentsea egin ahal izateko.</p> <p>Ziurtatu erregistroak prozesatzeko erraza den formatuan sortzen direla erregistroak kudeatzeko tresnen bidez.</p> <p>Ziurtatu erregistro-datuak behar bezala kodetuta daudela, monitorizazio- edo erregistro-sisteman injekzioak edo erasoak prebenitzeko.</p>"},{"location":"ariketak/security_logging_monitoring_failures/#erronkak","title":"Erronkak","text":""},{"location":"ariketak/security_logging_monitoring_failures/#estekak","title":"Estekak","text":"<ul> <li>OWASP Security Logging and Monitoring Failures</li> </ul>"},{"location":"ariketak/security_misconfiguration/","title":"Security Misconfiguration","text":"<p>Segurtasunaren konfigurazio okerra gertatzen da aplikazioa, zerbitzaria edo sistema ez dagoenean behar bezala konfiguraturik. Hau da, balio lehenetsi arriskutsuak erabiltzea, zerbitzu edo aukera gehiegi uztea gaituta, errore-mezu informatibo gehiegi erakustea, edo softwarea eguneratu gabe edukitzea. </p>"},{"location":"ariketak/security_misconfiguration/#adibideak","title":"Adibideak:","text":"<p>Aplikazio-zerbitzariak adibide gisa dituen aplikazioak ez dira ekoizpen-zerbitzaritik ezabatzen. Aplikazio horiek segurtasun-akats ezagunak dituzte, erasotzaileek zerbitzaria konprometitzeko erabiltzen dituztenak.</p>"},{"location":"ariketak/security_misconfiguration/#prebentsioa","title":"Prebentsioa","text":"<p>Arriskua murrizteko, komeni da ingurune guztiak modu identikoan konfiguratzea, behar ez diren zerbitzuak edo osagaiak deskonektatzea, konfigurazio guztia etengabe berrikustea, eta azken segurtasun-patxeak instalatuta edukitzea.</p>"},{"location":"ariketak/security_misconfiguration/#erronkak","title":"Erronkak","text":""},{"location":"ariketak/security_misconfiguration/#estekak","title":"Estekak","text":"<ul> <li>OWASP Security Misconfiguration</li> </ul>"},{"location":"ariketak/server_side_request_forgery/","title":"Server-Side Request Forgery (SSRF)","text":"<p>SSRF erasoetan, erasotzaileak zerbitzari bati kanpoko edo barne baliabideak lerrokatzeko eskaerak egitera behartzen du. Arrisku nagusia aplikazioak barneko baliabide kritikoetara sartzea (esaterako, AWS metadata zerbitzura), soilik zerbitzarian bertan eskura daitezkeen zerbitzuetara. </p>"},{"location":"ariketak/server_side_request_forgery/#adibideak","title":"Adibideak:","text":""},{"location":"ariketak/server_side_request_forgery/#prebentsioa","title":"Prebentsioa","text":"<p>Kasu honetan prebentsioa izan behar du bai zerbitzarian bai aplikazio geruzan ere.</p> <p>Adibidez zerbitzari geruzan ondorengo pausu hauek eman beharko lirateke: - Sare bereizietan urruneko baliabideetara sartzeko funtzionalitatearen arabera, SSRFen inpaktua murrizteko</p> <ul> <li>Firewall-politikak \"lehenespen gisa ukatu\" edo sarera sartzeko kontrol-arauak betearazi, intraneteko trafiko guztia blokeatzeko, funtsezkoa izan ezik.</li> </ul> <p>Eta aplikazio geruzatik aldiz beste hauek beste gauza askoren gain: - Konpondu eta baliozkotu bezeroak emandako sarrera-datu guztiak - Bete URL eskema, ataka eta helburua, onartutako item-zerrenda positibo baten bidez</p>"},{"location":"ariketak/server_side_request_forgery/#erronkak","title":"Erronkak","text":""},{"location":"ariketak/server_side_request_forgery/#estekak","title":"Estekak","text":"<ul> <li>OWASP Server-Side Request Forgery (SSRF)</li> </ul>"},{"location":"ariketak/software_data_integrity_failures/","title":"Software and Data Integrity Failures","text":"<p>Zibersegurtasun mehatxu hau gertatzen da aplikazioek ez dutenean egiaztatzen softwarearen edo datuen integritatea, adibidez, kanpoko osagaiak, eguneraketak edo konfigurazio kritikoak. Hau baliatuz, erasotzaileek kode gaiztoa txerta dezakete (supply chain attack).  </p>"},{"location":"ariketak/software_data_integrity_failures/#adibideak","title":"Adibideak:","text":"<p>Oso ezaguna da SolarWinds-en kasua, zeinak milaka bezero kaltetu zituen era honetan.</p>"},{"location":"ariketak/software_data_integrity_failures/#prebentsioa","title":"Prebentsioa","text":"<p>Arriskua murrizteko: sinadura digitalak, jatorri fidagarriak eta CI/CD pipeline-en segurtasun gutxieneko neurriak aplikatu behar dira</p>"},{"location":"ariketak/software_data_integrity_failures/#erronkak","title":"Erronkak","text":""},{"location":"ariketak/software_data_integrity_failures/#estekak","title":"Estekak","text":"<ul> <li>OWASP Software and Data Integrity Failures</li> </ul>"},{"location":"ariketak/vulnerable_obsolete_components/","title":"Vulnerable and Outdated Components","text":"<p>Osagai zaharkitu eta ahulekin lan egiteak, hala nola liburutegi edo framework zaharrekin, aukera ematen die erasotzaileei haien ahuleziak baliatzeko. Hau gertatzen da osagai horiek ez direlako eguneratzen, edo desoreka dagoelako haien bertsioen arteko bateragarritasunean. Osagai ez-jasotzaile edo ezeguneratuak erabiltzeak, adibidez, Equifax-eko datu-ihes sonatua ekarri zuen. </p>"},{"location":"ariketak/vulnerable_obsolete_components/#adibideak","title":"Adibideak:","text":"<p>Osagaiak, normalean, aplikazioak berak dituen pribilegio berdinekin exekutatzen dira, beraz, edozein osagaitan huts egiteak eragin larria izan dezakete. Akats horiek akzidentalak (adibidez, kodifikazio-errorea) edo intentzionalak (adibidez, osagai baten atzeko atea) izan daitezke.</p>"},{"location":"ariketak/vulnerable_obsolete_components/#prebentsioa","title":"Prebentsioa","text":"<p>Arriskuak murrizteko, beharrezkoa da osagaien zerrenda mantentzea, eguneratze-politika zorrotza ezartzea, eta soilik ondo mantendutako eta fidagarriak diren osagaiak erabiltzea. Hau da hurrengo pausuak jarraitu beharko genituzke besteak beste:</p> <ul> <li> <p>Ezabatu erabiltzen ez diren mendekotasunak, funtzionalitateak, osagaiak, fitxategiak eta dokumentazioa.</p> </li> <li> <p>Egin ezazu osagaiek bezeroan eta zerbitzarian dituzten bertsioen (adibidez, framework-ak, liburutegiak) eta horien mendekotasunen inbentario jarraitu bat, tresna hauek erabiliz: bertsioak, OWASP Dependency Check retire.js, etab.</p> </li> <li> <p>Bakarrik lortu iturri ofizialetatik osagaiak lotura seguruen bidez.</p> </li> </ul>"},{"location":"ariketak/vulnerable_obsolete_components/#erronkak","title":"Erronkak","text":""},{"location":"ariketak/vulnerable_obsolete_components/#estekak","title":"Estekak","text":"<ul> <li>OWASP Vulnerable and Outdated Components</li> </ul>"},{"location":"datu_babesa/api_segurtasuna/","title":"3.2 API Seguruak eta Autentifikazioa","text":""},{"location":"datu_babesa/api_segurtasuna/#oauth-20-eta-openid-connect","title":"OAuth 2.0 eta OpenID Connect","text":""},{"location":"datu_babesa/api_segurtasuna/#oauth-20-fluxu-osoa-authorization-code-flow-pkce","title":"OAuth 2.0 Fluxu Osoa (Authorization Code Flow + PKCE)","text":"<pre><code>sequenceDiagram\n    participant Erabiltzailea\n    participant Bezero Aplikazioa\n    participant Autorizazio Zerbitzaria\n    participant Baliabide Zerbitzaria\n\n    Erabiltzailea-&gt;&gt;Bezero Aplikazioa: Sartzen saiatzen da\n    Bezero Aplikazioa-&gt;&gt;Erabiltzailea: Bideratzen du /login-era\n    Erabiltzailea-&gt;&gt;Autorizazio Zerbitzaria: Sartu kredentzialak\n    Autorizazio Zerbitzaria-&gt;&gt;Erabiltzailea: Autentifikatuta, bideratzen du callback-era\n    Bezero Aplikazioa-&gt;&gt;Autorizazio Zerbitzaria: Trukatzen du kodea token baterako\n    Autorizazio Zerbitzaria--&gt;&gt;Bezero Aplikazioa: Itzultzen du access_token eta refresh_token\n    Bezero Aplikazioa-&gt;&gt;Baliabide Zerbitzaria: Eskaera access_token-ekin\n    Baliabide Zerbitzaria--&gt;&gt;Bezero Aplikazioa: Itzultzen ditu datuak\n</code></pre>"},{"location":"datu_babesa/api_segurtasuna/#pkce-proof-key-for-code-exchange-inplementazioa-react-nodejs","title":"PKCE (Proof Key for Code Exchange) inplementazioa (React + Node.js)","text":"<p>Bezeroaren aldea (React):</p> <pre><code>// PKCE kodea sortzeko funtzio lagungarriak\nconst generateRandomString = (length) =&gt; {\n  const array = new Uint32Array(length);\n  window.crypto.getRandomValues(array);\n  return Array.from(array, dec =&gt; ('0' + dec.toString(16)).substr(-2)).join('');\n};\n\nconst sha256 = async (plain) =&gt; {\n  const encoder = new TextEncoder();\n  const data = encoder.encode(plain);\n  const hash = await window.crypto.subtle.digest('SHA-256', data);\n  return Array.from(new Uint8Array(hash))\n    .map(b =&gt; b.toString(16).padStart(2, '0'))\n    .join('');\n};\n\nconst base64URLEncode = (str) =&gt; {\n  return btoa(String.fromCharCode.apply(null, new Uint8Array(str)))\n    .replace(/\\+/g, '-')\n    .replace(/\\//g, '_')\n    .replace(/=+$/, '');\n};\n\n// Login funtzioan\nconst handleLogin = async () =&gt; {\n  // 1. Sortu code_verifier eta code_challenge\n  const codeVerifier = generateRandomString(64);\n  const hashed = await sha256(codeVerifier);\n  const codeChallenge = base64URLEncode(hashed);\n\n  // 2. Gorde code_verifier sesioan\n  sessionStorage.setItem('code_verifier', codeVerifier);\n\n  // 3. Bideratu erabiltzailea autorizazio-endpointera\n  const authUrl = new URL('https://auth.zure-zerbitzaria.com/authorize');\n  const params = {\n    response_type: 'code',\n    client_id: 'zure_client_id',\n    redirect_uri: window.location.origin + '/callback',\n    code_challenge: codeChallenge,\n    code_challenge_method: 'S256',\n    scope: 'openid profile email',\n    state: generateRandomString(16)\n  };\n\n  Object.keys(params).forEach(key =&gt; \n    authUrl.searchParams.append(key, params[key])\n  );\n\n  window.location.href = authUrl.toString();\n};\n</code></pre> <p>Zerbitzariaren aldea (Node.js + Express):</p> <pre><code>const express = require('express');\nconst { createHmac } = require('crypto');\nconst jwt = require('jsonwebtoken');\n\nconst app = express();\napp.use(express.json());\n\n// Datuak gordetzeko (produkzioan datu-base bat erabili)\nconst codeVerifiers = new Map();\nconst refreshTokens = new Map();\n\n// 1. Autorizazio kodea itzuli\napp.get('/authorize', (req, res) =&gt; {\n  const { client_id, redirect_uri, code_challenge, state } = req.query;\n\n  // Egiaztatu bezeroa eta redirect_uria\n  if (client_id !== 'zure_client_id') {\n    return res.status(400).send('Client ID desegokia');\n  }\n\n  // Gorde code_challenge (normalean sesio batean)\n  const authCode = generateRandomString(32);\n  codeVerifiers.set(authCode, {\n    codeChallenge: code_challenge,\n    clientId: client_id,\n    redirectUri: redirect_uri,\n    createdAt: Date.now()\n  });\n\n  // Erabiltzaileari erakutsi baimen-orria eta gero...\n  // Erabiltzaileak baimena eman ondoren, redirect egiten du callback-era\n  const redirectUrl = new URL(redirect_uri);\n  redirectUrl.searchParams.append('code', authCode);\n  redirectUrl.searchParams.append('state', state);\n\n  res.redirect(redirectUrl.toString());\n});\n\n// 2. Trukaketa kodea token batekin\napp.post('/token', async (req, res) =&gt; {\n  const { client_id, code, code_verifier, redirect_uri, grant_type } = req.body;\n\n  // Egiaztatu parametroak\n  if (grant_type !== 'authorization_code') {\n    return res.status(400).json({ error: 'grant_type baliogabea' });\n  }\n\n  // Egiaztatu kodea\n  const codeData = codeVerifiers.get(code);\n  if (!codeData) {\n    return res.status(400).json({ error: 'Kodea baliogabea' });\n  }\n\n  // Egiaztatu code_verifier\n  const hashed = await sha256(code_verifier);\n  const codeChallenge = base64URLEncode(hashed);\n\n  if (codeChallenge !== codeData.codeChallenge) {\n    return res.status(400).json({ error: 'Code verifier desegokia' });\n  }\n\n  // Sortu tokenak\n  const accessToken = jwt.sign(\n    { sub: 'user123', client_id },\n    process.env.JWT_SECRET,\n    { expiresIn: '1h' }\n  );\n\n  const refreshToken = generateRandomString(64);\n  refreshTokens.set(refreshToken, { \n    sub: 'user123',\n    client_id,\n    expiresAt: Date.now() + 30 * 24 * 60 * 60 * 1000 // 30 egun\n  });\n\n  // Ezabatu kodea berrerabiltzea eragozteko\n  codeVerifiers.delete(code);\n\n  // Itzuli tokenak\n  res.json({\n    access_token: accessToken,\n    token_type: 'Bearer',\n    expires_in: 3600,\n    refresh_token: refreshToken,\n    id_token: '...' // OpenID Connect kasurako\n  });\n});\n\n// 3. Egiaztatu tokena (Resource Server)\nfunction authenticateToken(req, res, next) {\n  const authHeader = req.headers['authorization'];\n  const token = authHeader &amp;&amp; authHeader.split(' ')[1];\n\n  if (!token) return res.sendStatus(401);\n\n  jwt.verify(token, process.env.JWT_SECRET, (err, user) =&gt; {\n    if (err) return res.sendStatus(403);\n    req.user = user;\n    next();\n  });\n}\n\napp.get('/api/datuak', authenticateToken, (req, res) =&gt; {\n  // Erabiltzailearen datuak itzuli\n  res.json({ \n    message: 'Datuak lortu dira',\n    user: req.user \n  });\n});\n\n// Laguntzaile funtzioak\nfunction generateRandomString(length) {\n  return require('crypto').randomBytes(length).toString('hex');\n}\n\nasync function sha256(plain) {\n  return createHmac('sha256', '').update(plain).digest('hex');\n}\n\nfunction base64URLEncode(str) {\n  return Buffer.from(str, 'hex').toString('base64')\n    .replace(/\\+/g, '-')\n    .replace(/\\//g, '_')\n    .replace(/=+$/, '');\n}\n\nconst PORT = process.env.PORT || 3000;\napp.listen(PORT, () =&gt; {\n  console.log(`Zerbitzaria ${PORT} portuan entzuten...`);\n});\n</code></pre>"},{"location":"datu_babesa/api_segurtasuna/#api-segurtasun-hobespenak-security-headers","title":"API Segurtasun Hobespenak (Security Headers)","text":""},{"location":"datu_babesa/api_segurtasuna/#helmetjs-erabilita-nodejs","title":"Helmet.js erabilita (Node.js)","text":"<pre><code>const express = require('express');\nconst helmet = require('helmet');\n\nconst app = express();\n\n// Segurtasun-neurri orokorrak\napp.use(helmet());\n\n// Content Security Policy (CSP)\napp.use(\n  helmet.contentSecurityPolicy({\n    directives: {\n      defaultSrc: [\"'self'\"],\n      scriptSrc: [\n        \"'self'\",\n        \"'unsafe-inline'\", // Saiestu hau kentzen ahal bezain laster\n        \"https://apis.google.com\"\n      ],\n      styleSrc: [\"'self'\", \"'unsafe-inline'\"],\n      imgSrc: [\"'self'\", \"data:\", \"https://*.example.com\"],\n      connectSrc: [\"'self'\", \"https://api.zure-zerbitzaria.com\"],\n      fontSrc: [\"'self'\", \"https://fonts.gstatic.com\"],\n      objectSrc: [\"'none'\"],\n      upgradeInsecureRequests: []\n    }\n  })\n);\n\n// X-XSS-Protection\napp.use(helmet.xssFilter());\n\n// MIME-type sniffing ekidin\napp.use(helmet.noSniff());\n\n// Clickjacking ekidin\napp.use(helmet.frameguard({ action: 'deny' }));\n\n// HSTS (HTTPS behartzea)\nconst oneYearInSeconds = 31536000;\napp.use(helmet.hsts({\n  maxAge: oneYearInSeconds,\n  includeSubDomains: true,\n  preload: true\n}));\n\n// X-Powered-By ezkutatu\napp.use(helmet.hidePoweredBy());\n\n// DNS Prefetch kontrola\napp.use(helmet.dnsPrefetchControl({ allow: false }));\n\n// X-Download-Options (IE8+) - kontu fitxategiak zabaltzeko modua kontrolatzeko\napp.use(helmet.ieNoOpen());\n\n// X-Content-Type-Options\napp.use(helmet.noSniff());\n\n// X-Permitted-Cross-Domain-Policies\napp.use(helmet.permittedCrossDomainPolicies());\n\n// X-Frame-Options\napp.use(helmet.frameguard({ action: 'deny' }));\n\n// XSS Filter (zaharkitua, baina bateragarritasunerako)\napp.use((req, res, next) =&gt; {\n  res.setHeader('X-XSS-Protection', '1; mode=block');\n  next();\n});\n</code></pre>"},{"location":"datu_babesa/api_segurtasuna/#api-segurtasun-hobespenak-oso-garrantzitsua","title":"API Segurtasun Hobespenak (Oso garrantzitsua!)","text":""},{"location":"datu_babesa/api_segurtasuna/#1-sarrera-balidazioa","title":"1. Sarrera balidazioa","text":"<pre><code>// express-validator erabiliz\nconst { body, validationResult } = require('express-validator');\n\napp.post('/api/erabiltzaileak', [\n  // Izena: 2-50 karaktere, letrak eta zuriuneak bakarrik\n  body('izena')\n    .trim()\n    .isLength({ min: 2, max: 50 })\n    .matches(/^[\\p{L}\\s]+$/u)\n    .withMessage('Izenak 2-50 karaktere izan behar ditu eta letrak eta zuriuneak bakarrik'),\n\n  // Emaila: baliozkoa izan behar da\n  body('email')\n    .isEmail()\n    .normalizeEmail()\n    .withMessage('Mesedez, sartu helbide elektroniko baliagarri bat'),\n\n  // Pasahitza: 8+ karaktere, letra larri/ xehe bat, zenbaki bat eta karaktere berezi bat\n  body('pasahitza')\n    .isStrongPassword({\n      minLength: 8,\n      minLowercase: 1,\n      minUppercase: 1,\n      minNumbers: 1,\n      minSymbols: 1\n    })\n    .withMessage('Pasahitzak gutxienez 8 karaktere, letra larri bat, xehe bat, zenbaki bat eta karaktere berezi bat izan behar ditu')\n], async (req, res) =&gt; {\n  // Egiaztatu balidazio-emaitzak\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(400).json({ errors: errors.array() });\n  }\n\n  // Jarraitu prozesamendua\n  try {\n    // Erabiltzailea sortu...\n    res.status(201).json({ message: 'Erabiltzailea ondo sortu da' });\n  } catch (error) {\n    console.error('Errorea erabiltzailea sortzean:', error);\n    res.status(500).json({ error: 'Errorea zerbitzarian' });\n  }\n});\n</code></pre>"},{"location":"datu_babesa/api_segurtasuna/#2-rate-limiting-atzipen-muga","title":"2. Rate Limiting (Atzipen-muga)","text":"<pre><code>const rateLimit = require('express-rate-limit');\n\n// Oinarrizko rate limiting\nconst apiLimiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutuko leihoa\n  max: 100, // Leiho bakoitzeko gehienezko eskaera kopurua\n  message: { error: 'Eskaera gehiegi, saiatu berriro beranduago' },\n  standardHeaders: true, // Return rate limit info in the `RateLimit-*` headers\n  legacyHeaders: false, // Disable the `X-RateLimit-*` headers\n});\n\n// APIrako muga aplikatu\napp.use('/api/', apiLimiter);\n\n// Erabiltzailearen araberako rate limiting\nconst userLimiter = rateLimit({\n  windowMs: 60 * 60 * 1000, // Ordu 1\n  max: async (req, res) =&gt; {\n    // Erabiltzailearen IDa lortu (adibidez, tokenetik)\n    const userId = req.user?.id || req.ip;\n\n    // Erabiltzailearen plana lortu (adibidez, datu-base batetik)\n    const userPlan = await getUserPlan(userId);\n\n    // Planaren arabera itzuli muga\n    switch (userPlan) {\n      case 'free': return 100;\n      case 'pro': return 1000;\n      case 'enterprise': return 10000;\n      default: return 100;\n    }\n  },\n  keyGenerator: (req) =&gt; req.user?.id || req.ip,\n  message: { error: 'Zure erabiltzaile-planak muga bat du orduko eskaeretan' }\n});\n\napp.use('/api/erabiltzaile/datuak', userLimiter);\n</code></pre>"},{"location":"datu_babesa/api_segurtasuna/#3-errore-kudeaketa-segurua","title":"3. Errore-kudeaketa segurua","text":"<pre><code>// Errore-kudeatzaile orokorra\napp.use((err, req, res, next) =&gt; {\n  console.error(err.stack);\n\n  // Errore-mezu orokorra\n  const response = {\n    error: {\n      message: 'Errorea zerbitzarian',\n      code: 'internal_server_error',\n      requestId: req.id // request-id header bat erabiliz\n    }\n  };\n\n  // Garapenerako informazio gehiago\n  if (process.env.NODE_ENV === 'development') {\n    response.error.details = {\n      message: err.message,\n      stack: err.stack,\n      ...err\n    };\n  }\n\n  // HTTP egoera kodea\n  const statusCode = err.statusCode || 500;\n\n  // Erantzuna bidali\n  res.status(statusCode).json(response);\n});\n\n// 404 kudeaketa\napp.use((req, res) =&gt; {\n  res.status(404).json({\n    error: {\n      message: 'Ez da baliabidea aurkitu',\n      code: 'not_found',\n      path: req.path\n    }\n  });\n});\n</code></pre>"},{"location":"datu_babesa/api_segurtasuna/#ariketa-praktikoa","title":"Ariketa praktikoa","text":"<ol> <li>Inplementatu OAuth 2.0 + PKCE zure React/Node.js aplikazioan</li> <li>Konfiguratu CSP zure webgunean eta probatu Content-Security-Policy-Report-Only</li> <li>Egiaztatu zure API-aren segurtasuna OWASP ZAP edo Burp Suite erabiliz</li> <li>Inplementatu rate limiting zure API kritikoetan</li> </ol>"},{"location":"datu_babesa/api_segurtasuna/#hurrengo-urratsak","title":"Hurrengo urratsak","text":"<ul> <li>Tresna praktikoak eta segurtasun-ebaluazioa</li> <li>Atzera itzuli aurreko atalera</li> </ul>"},{"location":"datu_babesa/datu_sentikorrak/","title":"3.1 Datu sentikorren kudeaketa eta babesa","text":""},{"location":"datu_babesa/datu_sentikorrak/#datuen-zifraketa","title":"Datuen zifraketa","text":""},{"location":"datu_babesa/datu_sentikorrak/#zergatik-da-garrantzitsua-zifraketa-erabiltzea","title":"Zergatik da garrantzitsua zifraketa erabiltzea?","text":"<ul> <li>Datuak lapurtuz gero, ezingo dira irakurri</li> <li>Datuak transferitzerakoan segurtasuna bermatzen du</li> <li>Lege betetzea (GDPR, HIPAA, etab.)</li> </ul>"},{"location":"datu_babesa/datu_sentikorrak/#zifraketa-motak","title":"Zifraketa motak","text":""},{"location":"datu_babesa/datu_sentikorrak/#1-zifraketa-simetrikoa-aes","title":"1. Zifraketa simetrikoa (AES)","text":"<p>Gako berbera erabiltzen da zifratu eta deszifratzeko.</p> <p>Python adibidea (PyCryptodome):</p> <pre><code>from Crypto.Cipher import AES\nfrom Crypto.Random import get_random_bytes\nfrom Crypto.Util.Padding import pad, unpad\nimport base64\n\ndef zifratu(mezua, gakoa=None):\n    if gakoa is None:\n        gakoa = get_random_bytes(32)  # 256 bit-eko gakoa\n\n    # Sortu ausazko hasieratze-vektorea (IV)\n    iv = get_random_bytes(16)\n\n    # Sortu zifratzailea\n    cipher = AES.new(gakoa, AES.MODE_CBC, iv)\n\n    # Zifratu mezua (paddatu behar da 16 byte-ko blokeetarako)\n    mezua_ordokitua = pad(mezua.encode('utf-8'), AES.block_size)\n    testu_zifratua = cipher.encrypt(mezua_ordokitua)\n\n    # Itzuli base64 formatuan (IV + testu zifratua)\n    return base64.b64encode(iv + testu_zifratua).decode('utf-8')\n\ndeszifratu(mezua_zifratua, gakoa):\n    try:\n        # Deskodetu base64\n        datuak = base64.b64decode(mezua_zifratua)\n\n        # Atera IV eta testu zifratua\n        iv = datuak[:16]\n        testu_zifratua = datuak[16:]\n\n        # Sortu zifratzailea\n        cipher = AES.new(gakoa, AES.MODE_CBC, iv)\n\n        # Deszifratu eta kendu padding-a\n        mezua_ordokitua = cipher.decrypt(testu_zifratua)\n        mezua = unpad(mezua_ordokitua, AES.block_size).decode('utf-8')\n\n        return mezua\n    except Exception as e:\n        print(f\"Errorea deszifratzean: {e}\")\n        return None\n\n# Adibidea\ngakoa = get_random_bytes(32)  # Gorde seguruan gako hau!\nmezua = \"Hau sekretu bat da!\"\n\n# Zifratu\nmezua_zifratua = zifratu(mezua, gakoa)\nprint(f\"Zifratua: {mezua_zifratua}\")\n\n# Deszifratu\ndeszifratua = deszifratu(mezua_zifratua, gakoa)\nprint(f\"Deszifratua: {deszifratua}\")\n</code></pre>"},{"location":"datu_babesa/datu_sentikorrak/#2-zifraketa-asimetrikoa-rsa","title":"2. Zifraketa asimetrikoa (RSA)","text":"<p>Gako pribatu/publiko bikotea erabiltzen du.</p> <p>Python adibidea (cryptography):</p> <pre><code>from cryptography.hazmat.primitives.asymmetric import rsa, padding\nfrom cryptography.hazmat.primitives import serialization, hashes\n\ndef sortu_gakoak():\n    # Sortu gako pribatua\n    pribatua = rsa.generate_private_key(\n        public_exponent=65537,\n        key_size=4096\n    )\n\n    # Atera gako publikoa\n    publikoa = pribatua.public_key()\n\n    return pribatua, publikoa\n\ndef zifratu_rsa(mezua, gako_publicoa):\n    # Zifratu gako publikoarekin\n    testu_zifratua = gako_publicoa.encrypt(\n        mezua.encode('utf-8'),\n        padding.OAEP(\n            mgf=padding.MGF1(algorithm=hashes.SHA256()),\n            algorithm=hashes.SHA256(),\n            label=None\n        )\n    )\n    return testu_zifratua\n\ndeszifratu_rsa(testu_zifratua, gako_pribatua):\n    # Deszifratu gako pribatuarekin\n    mezua = gako_pribatua.decrypt(\n        testu_zifratua,\n        padding.OAEP(\n            mgf=padding.MGF1(algorithm=hashes.SHA256()),\n            algorithm=hashes.SHA256(),\n            label=None\n        )\n    )\n    return mezua.decode('utf-8')\n\n# Adibidea\npribatua, publikoa = sortu_gakoak()\nmezua = \"Hau ere sekretu bat da!\"\n\n# Zifratu\ntestu_zifratua = zifratu_rsa(mezua, publikoa)\nprint(f\"Zifratua: {testu_zifratua.hex()}\")\n\n# Deszifratu\ndeszifratua = deszifratu_rsa(testu_zifratua, pribatua)\nprint(f\"Deszifratua: {deszifratua}\")\n</code></pre>"},{"location":"datu_babesa/datu_sentikorrak/#datuak-transferitzerakoan-tlshttps","title":"Datuak transferitzerakoan (TLS/HTTPS)","text":""},{"location":"datu_babesa/datu_sentikorrak/#nola-konfiguratu-https-nodejs-n-express","title":"Nola konfiguratu HTTPS Node.js-n (Express)","text":"<pre><code>const https = require('https');\nconst fs = require('fs');\nconst express = require('express');\n\nconst app = express();\n\n// Konfiguratu segurtasun-neurriak\napp.use(helmet());\n\n// HSTS (HTTP Strict Transport Security)\napp.use(helmet.hsts({\n  maxAge: 31536000, // 1 urte\n  includeSubDomains: true,\n  preload: true\n}));\n\n// Beste segurtasun-headerrak\napp.use(helmet.frameguard({ action: 'deny' }));\napp.use(helmet.xssFilter());\napp.use(helmet.noSniff());\n\n// Irakurri SSL/TLS gakoak\nconst options = {\n  key: fs.readFileSync('path/to/private.key'),\n  cert: fs.readFileSync('path/to/certificate.crt'),\n  // Aukera gehigarriak\n  minVersion: 'TLSv1.2',\n  ciphers: [\n    'ECDHE-ECDSA-AES256-GCM-SHA384',\n    'ECDHE-RSA-AES256-GCM-SHA384',\n    // ...\n  ].join(':')\n};\n\n// Abiarritu HTTPS zerbitzaria\nhttps.createServer(options, app).listen(443, () =&gt; {\n  console.log('HTTPS zerbitzaria 443 portuan entzuten...');\n});\n</code></pre>"},{"location":"datu_babesa/datu_sentikorrak/#datuak-gordetzeko-aholkuak","title":"Datuak gordetzeko aholkuak","text":""},{"location":"datu_babesa/datu_sentikorrak/#1-ez-gorde-datu-sentikorrik-behar-ez-baduzu","title":"1. Ez gorde datu sentikorrik behar ez baduzu","text":"<ul> <li>Ez gorde pasahitzak, baizik eta hash egindako bertsioak</li> <li>Ez gorde kreditu-txartel zenbakiak behar ez baduzu</li> </ul>"},{"location":"datu_babesa/datu_sentikorrak/#2-datuen-minimizazioa","title":"2. Datuen minimizazioa","text":"<ul> <li>Biltzean: Biltzeko baimena duzun datu minimoa baino ez bildu</li> <li>Gordean: Beharrezkoak diren datuak soilik gorde</li> <li>Iraungitzean: Datuak ezabatu epearen amaieran</li> </ul>"},{"location":"datu_babesa/datu_sentikorrak/#3-datuak-maskatu-erakusteko","title":"3. Datuak maskatu erakusteko","text":"<pre><code>function maskatuZenbakiKontua(zenbakiKontua) {\n  if (!zenbakiKontua) return '';\n  const luzeera = zenbakiKontua.length;\n  if (luzeera &lt;= 4) return zenbakiKontua;\n  return '*'.repeat(luzeera - 4) + zenbakiKontua.slice(-4);\n}\n\n// Adibidea\nconsole.log(maskatuZenbakiKontua('1234567890123456')); // \"************3456\"\n</code></pre>"},{"location":"datu_babesa/datu_sentikorrak/#tokenen-kudeaketa-segurua","title":"Tokenen kudeaketa segurua","text":""},{"location":"datu_babesa/datu_sentikorrak/#jwt-tokenak-seguru-gordetzeko","title":"JWT tokenak seguru gordetzeko","text":"<p>Adibidea (React + localStorage erabiliz - ez da gomendagarria):</p> <pre><code>// Tokena gordetzeko modu OSO SINPLEA (ez da segurua)\nconst gordeTokena = (token) =&gt; {\n  try {\n    localStorage.setItem('token', token);\n  } catch (error) {\n    console.error('Ezin izan da tokena gorde:', error);\n  }\n};\n</code></pre> <p>Hobea (HTTP-only Cookie erabiliz, zerbitzarian):</p> <pre><code>// Zerbitzariaren erantzuna (Node.js + Express)\nres.cookie('token', token, {\n  httpOnly: true,\n  secure: true, // HTTPS bidez bakarrik\n  sameSite: 'strict',\n  maxAge: 24 * 60 * 60 * 1000 // 1 egun\n});\n</code></pre>"},{"location":"datu_babesa/datu_sentikorrak/#tokenen-iraungipena","title":"Tokenen iraungipena","text":"<pre><code>// Token bat sortzean (Node.js)\nfunction sortuTokena(erabiltzailea) {\n  return jwt.sign(\n    {\n      sub: erabiltzailea.id,\n      iat: Math.floor(Date.now() / 1000), // Noiz sortua\n      exp: Math.floor(Date.now() / 1000) + (60 * 60), // 1 ordu barru iraungiko da\n      // Beste eremuak...\n    },\n    process.env.JWT_SECRET,\n    { algorithm: 'HS256' }\n  );\n}\n\n// Bezeroan tokena egiaztatu (React)\nuseEffect(() =&gt; {\n  const egiaztatuTokena = async () =&gt; {\n    try {\n      const erantzuna = await fetch('/api/egiaztatu-tokena', {\n        credentials: 'include' // Cookie bidaltzeko\n      });\n\n      if (!erantzuna.ok) {\n        // Tokena baliogabea da, erabiltzailea deskonektatu\n        await deskonektatu();\n      }\n    } catch (error) {\n      console.error('Errorea tokena egiaztatzean:', error);\n    }\n  };\n\n  // Egiaztatu tokena noizbehinka\n  const interval = setInterval(egiaztatuTokena, 5 * 60 * 1000); // 5 minutero\n\n  return () =&gt; clearInterval(interval);\n}, []);\n</code></pre>"},{"location":"datu_babesa/datu_sentikorrak/#ariketa-praktikoa","title":"Ariketa praktikoa","text":"<ol> <li>Inplementatu zifraketa simetrikoa datu sentikorrak gordetzeko</li> <li>Konfiguratu HTTPS zure proiektuan</li> <li>Sortu tokenen kudeaketa sistema bat HTTP-only cookie-kin</li> <li>Egiaztatu zure webgunearen segurtasun-neurriak (helmet, CSP, etb.)</li> </ol>"},{"location":"datu_babesa/datu_sentikorrak/#hurrengo-urratsak","title":"Hurrengo urratsak","text":"<ul> <li>API seguruak eta autentifikazioa</li> <li>Atzera itzuli aurreko atalera</li> </ul>"},{"location":"datu_babesa/tresnak/","title":"3.3 Segurtasun-tresna praktikoak","text":""},{"location":"datu_babesa/tresnak/#garapen-segurua-devsecops","title":"Garapen Segurua (DevSecOps)","text":""},{"location":"datu_babesa/tresnak/#1-sast-static-application-security-testing","title":"1. SAST (Static Application Security Testing)","text":"<p>ESLint segurtasun-pluginarekin (JavaScript/TypeScript)</p> <pre><code># Instalatu beharrezko paketeak\nnpm install --save-dev eslint eslint-plugin-security\n</code></pre> <p>.eslintrc.js konfigurazioa:</p> <pre><code>module.exports = {\n  \"extends\": [\n    \"eslint:recommended\",\n    \"plugin:security/recommended\"\n  ],\n  \"plugins\": [\"security\"],\n  \"rules\": {\n    \"security/detect-buffer-noassert\": \"error\",\n    \"security/detect-child-process\": \"error\",\n    \"security/detect-disable-mustache-escapes\": \"error\",\n    \"security/detect-eval-with-expression\": \"error\",\n    \"security/detect-no-csrf-before-method-override\": \"error\",\n    \"security/detect-non-literal-fs-filename\": \"warn\",\n    \"security/detect-non-literal-regexp\": \"error\",\n    \"security/detect-non-literal-require\": \"warn\",\n    \"security/detect-object-injection\": \"off\", // Piztu behar bada, kode asko aldatu behar da\n    \"security/detect-possible-timing-attacks\": \"error\",\n    \"security/detect-pseudoRandomBytes\": \"error\",\n    \"security/detect-unsafe-regex\": \"error\"\n  }\n};\n</code></pre>"},{"location":"datu_babesa/tresnak/#2-dast-dynamic-application-security-testing","title":"2. DAST (Dynamic Application Security Testing)","text":"<p>OWASP ZAP erabiliz (Docker bidez):</p> <pre><code># OWASP ZAP abiarazi Docker-en\n# Web Interfazea: http://localhost:8080\n# API: http://localhost:8081\n\ndocker run -u zap -p 8080:8080 -p 8081:8081 \\\n  -i owasp/zap2docker-stable zap-webswing.sh\n\n# Automatizatutako eskaneatzea\n# (ZAPen komando-lerro bidez)\ndocker run -i owasp/zap2docker-stable zap-baseline.py \\\n  -t https://zure-aplikazioa.eus \\\n  -r test-report.html \\\n  -l INFO \\\n  -a  # Aktiboki probatu arazoak\n</code></pre>"},{"location":"datu_babesa/tresnak/#3-sca-software-composition-analysis","title":"3. SCA (Software Composition Analysis)","text":"<p>Dependabot konfigurazioa GitHub-en (<code>.github/dependabot.yml</code>):</p> <pre><code>version: 2\nupdates:\n  # JavaScript/Node.js eguneraketak\n  - package-ecosystem: \"npm\"\n    directory: \"/\"\n    schedule:\n      interval: \"weekly\"\n    # Segurtasun eguneraketak berehala exekutatu\n    pull-request-branch-name:\n      separator: \"-\"\n    labels:\n      - \"dependencies\"\n      - \"javascript\"\n    # OpenSSF Scorecard bidezko segurtasun-azterketa\n    open-pull-requests-limit: 10\n    # Segurtasun-bulletin baten araberako eguneraketak\n    vulnerability-alerts:\n      enabled: true\n\n  # Docker irudiak eguneratu\n  - package-ecosystem: \"docker\"\n    directory: \"/\"\n    schedule:\n      interval: \"weekly\"\n    labels:\n      - \"dependencies\"\n      - \"docker\"\n</code></pre>"},{"location":"datu_babesa/tresnak/#segurtasun-probak-automatzeko","title":"Segurtasun-probak automatzeko","text":""},{"location":"datu_babesa/tresnak/#1-nikto-web-vulnerability-scanner","title":"1. Nikto (Web Vulnerability Scanner)","text":"<pre><code># Instalazioa (Ubuntu/Debian)\nsudo apt install nikto\n\n# Oinarrizko erabilera\nnikto -h https://zure-aplikazioa.eus\n\n# Erreportea HTML formatuan gordetzeko\nnikto -h https://zure-aplikazioa.eus -o nikto_scan.html -F htm\n\n# Proxy bat erabiliz (adibidez, OWASP ZAP)\nnikto -h https://zure-aplikazioa.eus -useproxy http://localhost:8080\n\n# Cookie bat gehitu saioari jarraitzeko\nnikto -h https://zure-aplikazioa.eus -C \"sessionid=abc123; secure;\"\n</code></pre>"},{"location":"datu_babesa/tresnak/#2-nmap-sareko-eskanerra","title":"2. Nmap (Sareko eskanerra)","text":"<pre><code># Portu irekiak aurkitu\nnmap -sS -p- -T4 -v zure-zerbitzaria.eus\n\n# Zerbitzuak eta bertsioak detektatu\nnmap -sV -sC -p 80,443,8080 zure-zerbitzaria.eus\n\n# NSE (Nmap Scripting Engine) erabiliz\nnmap --script=http-security-headers,http-csrf,http-sql-injection -p 80,443 zure-zerbitzaria.eus\n\n# Irteera XML formatuan gordetzeko\nnmap -oX scan_results.xml -sV -sC zure-zerbitzaria.eus\n</code></pre>"},{"location":"datu_babesa/tresnak/#kodearen-analisi-estatikoa","title":"Kodearen Analisi Estatikoa","text":""},{"location":"datu_babesa/tresnak/#1-sonarqube-sonarlint","title":"1. SonarQube + SonarLint","text":"<p>SonarQube konfigurazioa (Docker):</p> <pre><code># docker-compose.yml\nversion: '3'\nservices:\n  sonarqube:\n    image: sonarqube:community\n    ports:\n      - \"9000:9000\"\n    environment:\n      - SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true\n      - SONAR_JDBC_URL=jdbc:postgresql://db:5432/sonar\n      - SONAR_JDBC_USERNAME=sonar\n      - SONAR_JDBC_PASSWORD=sonar\n    volumes:\n      - sonarqube_data:/opt/sonarqube/data\n      - sonarqube_extensions:/opt/sonarqube/extensions\n    depends_on:\n      - db\n\n  db:\n    image: postgres:13\n    environment:\n      - POSTGRES_USER=sonar\n      - POSTGRES_PASSWORD=sonar\n      - POSTGRES_DB=sonar\n    volumes:\n      - postgresql_data:/var/lib/postgresql/data\n      - postgresql_data_db:/var/lib/postgresql/data/db\n\nvolumes:\n  sonarqube_data:\n  sonarqube_extensions:\n  postgresql_data:\n  postgresql_data_db:\n</code></pre> <p>Sonar-scanner erabilera (proiektu bakoitzean):</p> <pre><code># sonar-project.properties fitxategia\nsonar.projectKey=proiektuaren-izena\nsonar.projectName=\"Proiektuaren Izena\"\nsonar.projectVersion=1.0\nsonar.sources=.\nsonar.sourceEncoding=UTF-8\nsonar.exclusions=**/node_modules/**,**/*.spec.js\nsonar.javascript.lcov.reportPaths=coverage/lcov.info\n\n# Exekutatu analisia\ndocker run --rm \\\n  -v \"$(pwd):/usr/src\" \\\n  -w /usr/src \\\n  sonarsource/sonar-scanner-cli\n</code></pre>"},{"location":"datu_babesa/tresnak/#2-snyk-dependency-vulnerabilities","title":"2. Snyk (Dependency Vulnerabilities)","text":"<pre><code># Instalatu Snyk CLI\nnpm install -g snyk\n\n# Erabiltzailearekin autentifikatu\nsnyk auth\n\n# Proiektu baten analisia egiteko\nsnyk test\n\n# Monitoretik jarraitu dependientziak\nsnyk monitor\n\n# Docker irudi baten analisia\nsnyk container test ubuntu:latest\n\n# IaC (Terraform, CloudFormation) analisia\nsnyk iac test\n</code></pre>"},{"location":"datu_babesa/tresnak/#segurtasun-probak-automatzeko-cicd","title":"Segurtasun-probak automatzeko (CI/CD)","text":""},{"location":"datu_babesa/tresnak/#github-actions-adibidea","title":"GitHub Actions adibidea","text":"<pre><code># .github/workflows/security-scan.yml\nname: Security Scan\n\non:\n  push:\n    branches: [ main, develop ]\n  pull_request:\n    branches: [ main, develop ]\n  schedule:\n    - cron: '0 0 * * 0' # Astero igandero\n\njobs:\n  security-scan:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n\n    # Node.js ingurunea konfiguratu\n    - name: Use Node.js\n      uses: actions/setup-node@v3\n      with:\n        node-version: '18.x'\n        cache: 'npm'\n\n    # Instalatu dependientziak\n    - name: Install dependencies\n      run: npm ci\n\n    # Exekutatu testak\n    - name: Run tests\n      run: npm test\n\n    # Exekutatu linterra\n    - name: Run linter\n      run: npx eslint . --ext .js,.jsx,.ts,.tsx\n\n    # Snyk bidezko segurtasun-azterketa\n    - name: Run Snyk to check for vulnerabilities\n      uses: snyk/actions/node@master\n      env:\n        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n      with:\n        args: --severity-threshold=high\n\n    # OWASP ZAP eskaneatzea (Docker bidez)\n    - name: OWASP ZAP Scan\n      uses: zaproxy/action-baseline@v0.6.0\n      with:\n        target: 'https://zure-aplikazioa.eus'\n        rules_file_name: '.zap/rules.tsv'\n        risk: '1,2,3'  # 1: Informazioa, 2: Arriskutsua, 3: Kritikoa\n        fail_action: true  # Erroreak badaude, workflowa apurtu\n\n    # Trivy bidezko irudiaren analisia (Docker)\n    - name: Run Trivy vulnerability scanner\n      uses: aquasecurity/trivy-action@master\n      with:\n        image-ref: 'zure-irudia:etiqueta'\n        format: 'table'\n        exit-code: '1'\n        ignore-unfixed: true\n        severity: 'CRITICAL'\n</code></pre>"},{"location":"datu_babesa/tresnak/#segurtasun-neurriak-probatzeko-laborategiak","title":"Segurtasun-neurriak probatzeko laborategiak","text":""},{"location":"datu_babesa/tresnak/#1-owasp-juice-shop","title":"1. OWASP Juice Shop","text":"<pre><code># Docker bidez abiarazi\ndocker run --rm -p 3000:3000 bkimminich/juice-shop\n\n# Eta ondoren nabigatu http://localhost:3000\n</code></pre>"},{"location":"datu_babesa/tresnak/#2-dvwa-damn-vulnerable-web-application","title":"2. DVWA (Damn Vulnerable Web Application)","text":"<pre><code># Docker bidez abiarazi\ndocker run --rm -it -p 80:80 vulnerables/web-dvwa\n\n# Eta ondoren nabigatu http://localhost\n# Saio-hasierako lehenetsitako kredentzialak:\n# Erabiltzailea: admin\n# Pasahitza: password\n</code></pre>"},{"location":"datu_babesa/tresnak/#3-webgoat","title":"3. WebGoat","text":"<pre><code># Docker bidez abiarazi\ndocker run -it -p 8080:8080 -p 9090:9090 -e TZ=Europe/Madrid \\\n  -e WEBGOAT_ADMIN_PASSWORD=ChangeMe! \\\n  --name webgoat webgoat/goatandwolf:v8.2.2\n\n# Eta ondoren nabigatu http://localhost:8080/WebGoat\n</code></pre>"},{"location":"datu_babesa/tresnak/#ariketa-praktikoa","title":"Ariketa praktikoa","text":"<ol> <li>Konfiguratu GitHub Actions zure proiektuarentzat segurtasun-eskaneatze automatikoak egiteko</li> <li>Exekutatu OWASP ZAP zure aplikazio lokalaren kontra eta konpondu aurkitutako arazoak</li> <li>Erabili Snyk edo Dependabot zure proiektuaren dependientzien segurtasuna aztertzeko</li> <li>Instalatu SonarLint zure IDEan eta konpondu aurkitutako arazoak</li> </ol>"},{"location":"datu_babesa/tresnak/#bukatzeko-aholkuak","title":"Bukatzeko aholkuak","text":"<ul> <li>Segurtasuna ez da produktu bat, prozesu bat da: Eguneratu eta aztertu zure aplikazioa etengabe</li> <li>\"Secure by Default\": Segurtasuna hasieratik txertatu garapenean</li> <li>Gutxieneko pribilegioen printzipioa: Erabiltzaileek eta prozesuek baimen minimoak izan ditzatela</li> <li>Neurri anitzak: Ez fidatu defentsa bakarrean, erabili hainbat geruza</li> <li>Eduki segurtasun-politika argi bat: Zure taldeak jakin behar du zer den onartzen den eta zer ez</li> </ul>"},{"location":"datu_babesa/tresnak/#baliabide-gehiago","title":"Baliabide gehiago","text":"<ul> <li>OWASP Cheat Sheet Series</li> <li>Mozilla Web Security Guidelines</li> <li>PortSwigger Web Security Academy</li> <li>Snyk Learn</li> </ul>"},{"location":"datu_babesa/tresnak/#amaiera","title":"Amaiera","text":"<p>Zorionak! Zibersegurtasunaren oinarriak eta tresna praktikoak ikasi dituzu web garapenean. Gogoan izan segurtasuna ez dela helmuga bat, bidaia bat baizik. Jarri ezazu ikasitakoa praktikan eta mantendu zure gaitasunak eguneratzen!</p>"},{"location":"eraso_defentsak/autentifikazioa/","title":"3.2 Autentifikazio eta Saioen Segurtasuna","text":""},{"location":"eraso_defentsak/autentifikazioa/#pasahitzen-kudeaketa-segurua","title":"Pasahitzen Kudeaketa Segurua","text":""},{"location":"eraso_defentsak/autentifikazioa/#zergatik-ez-da-nahikoa-pasahitzak-zuzenean-gordetzea","title":"Zergatik ez da nahikoa pasahitzak zuzenean gordetzea?","text":"<ul> <li>Segurtasun arriskua: Datuak lapurtuz gero, erabiltzaileen pasahitzak eskuragarri egongo lirateke</li> <li>Pasahitz errepikapena: Erabiltzaileek pasahitz berbera erabiltzen dute hainbat zerbitzutan</li> <li>Pribatutasuna: Legezko erabiltzaileek ere ezingo lituzkete pasahitzak ikusi (erabat) \u2014 hori printzipio bat da.</li> </ul>"},{"location":"eraso_defentsak/autentifikazioa/#nola-gordetu-pasahitzak-php","title":"Nola gordetu pasahitzak (PHP)","text":"<p>PHP-n bcrypt edo Argon2 erabiltzeko password_hash() eta password_verify() funtzioak erabiltzen dira; PHPk automatikoki gatza kudeatzen du, beraz ez da gatza eskuz sortu behar.</p>"},{"location":"eraso_defentsak/autentifikazioa/#sortu-eta-gorde-pasahitza-erregistratzean","title":"Sortu eta gorde pasahitza (erregistratzean)","text":"<pre><code>    // register.php (adibidea)\n    $password = $_POST['password']; // beti balidatu/egiaztatu lehenago\n\n    // PASSWORD_DEFAULT erabil dezakezu (gaur egungo bertsioan bcrypt edo hobea izango da)\n    $hash = password_hash($password, PASSWORD_DEFAULT);\n\n    // Gorde $hash datu-basera (PDO erabiliz)\n    $stmt = $pdo-&gt;prepare(\"INSERT INTO users (email, password_hash) VALUES (:email, :hash)\");\n    $stmt-&gt;execute([':email' =&gt; $_POST['email'], ':hash' =&gt; $hash]);\n</code></pre>"},{"location":"eraso_defentsak/autentifikazioa/#egiaztatu-pasahitza-sartzean","title":"Egiaztatu pasahitza sartzean","text":"<pre><code>    // login.php\n    $email = $_POST['email'];\n    $password = $_POST['password'];\n\n    $stmt = $pdo-&gt;prepare(\"SELECT id, password_hash FROM users WHERE email = :email LIMIT 1\");\n    $stmt-&gt;execute([':email' =&gt; $email]);\n    $user = $stmt-&gt;fetch(PDO::FETCH_ASSOC);\n\n    if ($user &amp;&amp; password_verify($password, $user['password_hash'])) {\n    // Arrakastaz egiaztatu\n    // Bertsio berritzailea behar bada berriro-hash egin:\n        if (password_needs_rehash($user['password_hash'], PASSWORD_DEFAULT)) {\n            $newHash = password_hash($password, PASSWORD_DEFAULT);\n            $upd = $pdo-&gt;prepare(\"UPDATE users SET password_hash = :hash WHERE id = :id\");\n            $upd-&gt;execute([':hash' =&gt; $newHash, ':id' =&gt; $user['id']]);\n        }\n        // Saioa hasi, etab.\n    } else {\n        // Ok\n    }\n</code></pre>"},{"location":"eraso_defentsak/autentifikazioa/#pasahitz-politika-eta-bestelako-neurriak","title":"Pasahitz politika eta bestelako neurriak","text":"<ul> <li>Gutxienez 8+ karaktere (hobeto 12+), baina fokusatu passphrases-ean eta kontuan izanda erraztasuna erabiltzailearen esperientzian.</li> <li>Erabil ezazu password strength meter frontend-era baina ez itxi onartu indarrez: informatu bakarrik.</li> <li>Konta-itzali politikak (lockout) edo tasa-mugak (rate limiting) sartu saiakerak gehiegi badira.</li> <li>Beti erabili TLS/HTTPS.</li> </ul>"},{"location":"eraso_defentsak/autentifikazioa/#saioen-kudeaketa-segurua","title":"Saioen Kudeaketa Segurua","text":""},{"location":"eraso_defentsak/autentifikazioa/#cookie-seguruak-konfiguratzea","title":"Cookie Seguruak Konfiguratzea","text":"<p>Ezarri cookie-aren parametro seguruak session_set_cookie_params() erabiliz session_start() aurretik.</p> <pre><code>    $cookieParams = [\n        'lifetime' =&gt; 60*60*24, // 1 egun (egokitu behar dena)\n        'path'     =&gt; '/',\n        'domain'   =&gt; '.zure-domeinua.eus',\n        'secure'   =&gt; true,      // HTTPS behar du\n        'httponly' =&gt; true,      // JSk ezin du irakurri\n        'samesite' =&gt; 'Lax'      // edo 'Strict' behar izanez gero\n    ];\n    session_set_cookie_params($cookieParams);\n    session_start();\n</code></pre>"},{"location":"eraso_defentsak/autentifikazioa/#saioa-itxi-logout-modu-seguruan","title":"Saioa itxi (logout) modu seguruan","text":"<pre><code>    // logout.php\n    session_start();\n    $_SESSION = [];\n    if (ini_get(\"session.use_cookies\")) {\n        $params = session_get_cookie_params();\n        setcookie(session_name(), '', time() - 42000,\n            $params['path'], $params['domain'],\n            $params['secure'], $params['httponly']\n        );\n    }\n    session_destroy();\n</code></pre>"},{"location":"eraso_defentsak/autentifikazioa/#csrf-babesa-php-oinarrizko-tokena","title":"CSRF babesa (PHP) \u2014 oinarrizko tokena","text":"<p>Sortu CSRF token bat formulario bakoitzerako eta egiaztatu zerbitzarian.</p> <pre><code>    // PHP saioaren barruan, token bat sortu eta saioan gorde:\n\n    // session_start() beti lehenengo lerroan!\n    session_start();\n\n    function csrf_token() {\n        if (empty($_SESSION['csrf_token'])) {\n            // 32 byte ausazko token sortu, hex-formatuan\n            $_SESSION['csrf_token'] = bin2hex(random_bytes(32));\n        }\n        return $_SESSION['csrf_token'];\n    }\n\n\n\n    // Formulari bakoitzean sartu token hau hidden input batekin:\n\n    &lt;form action=\"submit.php\" method=\"post\"&gt;\n        &lt;input type=\"hidden\" name=\"csrf_token\" value=\"&lt;?php echo htmlspecialchars(csrf_token()); ?&gt;\"&gt;\n\n        &lt;label for=\"name\"&gt;Izena:&lt;/label&gt;\n        &lt;input type=\"text\" name=\"name\" id=\"name\"&gt;\n\n        &lt;button type=\"submit\"&gt;Bidali&lt;/button&gt;\n    &lt;/form&gt;\n\n\n\n    // Zerbitzarian tokena egiaztatu. submit.php fitxategian, eskaera jasotzean:\n\n    session_start();\n\n    // POSTeko tokena egiaztatu\n    if (!isset($_POST['csrf_token']) || !hash_equals($_SESSION['csrf_token'], $_POST['csrf_token'])) {\n        http_response_code(400);\n        exit('CSRF token okerra edo falta da.');\n    }\n\n    // Tokena zuzena bada, jarraitu datuak prozesatzen\n    $name = $_POST['name'];\n    echo \"Formularioa ondo bidali da: $name\";\n</code></pre>"},{"location":"eraso_defentsak/injekzioak/","title":"3.1 Injekzioen aurkako defentsak","text":""},{"location":"eraso_defentsak/injekzioak/#backend-erako-defentsak","title":"Backend-erako defentsak","text":""},{"location":"eraso_defentsak/injekzioak/#frontend-erako-defentsak","title":"Frontend-erako defentsak","text":""},{"location":"eraso_defentsak/injekzioak/#1-a012021-broken-access-control-sarbide-kontrol-apurtua","title":"1. A01:2021 - Broken Access Control (Sarbide Kontrol Apurtua)","text":"<p>Baimendutako ez diren erabiltzaileei funtzioak edo datuak atzitzea ahalbidetzen du. Bezeroan, elementuak ezkutatzea ez da nahikoa, kodea manipulagarria baita.</p>"},{"location":"eraso_defentsak/injekzioak/#ezegonkorra","title":"Ezegonkorra:","text":"<p>Botoi bat ezkutatzea nahikoa dela pentsatzea.</p> <pre><code>if (!user.isAdmin) {\n  document.getElementById(\"deleteBtn\").style.display = \"none\";\n}\n</code></pre>"},{"location":"eraso_defentsak/injekzioak/#segurua","title":"Segurua:","text":"<p>Backend-ek beti balidatu behar du baimena.</p> <pre><code>if (!user.isAdmin) {\n  document.getElementById(\"deleteBtn\").remove();\n}\n</code></pre>"},{"location":"eraso_defentsak/injekzioak/#aholkuak","title":"Aholkuak:","text":"<ul> <li>Ez fidatu bezero aldeko balioztapenetan; egiaztatu backend-ean tokenak erabiliz (adib., JWT).</li> <li>Erabili gutxieneko pribilegioaren printzipioa.</li> <li>Inplementatu RBAC (Roleen Bidezko Sarbide Kontrola) zerbitzarian.</li> </ul>"},{"location":"eraso_defentsak/injekzioak/#2-a022021-cryptographic-failures-kriptografia-hutsegiteak","title":"2. A02:2021 - Cryptographic Failures (Kriptografia Hutsegiteak)","text":"<p>Datu sentikorren esposizioa kriptografia ahularen bidez. JS-n, saihestu secretak bezeroan gordetzea edo HTTPS gabe transmititzea.</p>"},{"location":"eraso_defentsak/injekzioak/#ezegonkorra_1","title":"Ezegonkorra:","text":"<p>Pasahitzak edo tokenak <code>localStorage</code>-n gordetzea.</p> <pre><code>localStorage.setItem(\"password\", \"123456\");\n</code></pre>"},{"location":"eraso_defentsak/injekzioak/#segurua_1","title":"Segurua:","text":"<p>Inoiz ez gorde pasahitzak. Token aldi baterako hobeak <code>sessionStorage</code>-n.</p> <pre><code>sessionStorage.setItem(\"password\", 123456);\n</code></pre> <p>Beste modu bat...</p> <pre><code>async function hashPassword(password) {\n  const encoder = new TextEncoder();\n  const data = encoder.encode(password);\n  const hash = await crypto.subtle.digest('SHA-256', data);\n  return Array.from(new Uint8Array(hash)).map(b =&gt;\n    b.toString(16).padStart(2, '0')).join('');\n}\n</code></pre>"},{"location":"eraso_defentsak/injekzioak/#aholkuak_1","title":"Aholkuak:","text":"<ul> <li>Erabili HTTPS beti.</li> <li>Gorde tokenak HttpOnly cookie-etan, ez localStorage-n.</li> <li>Erabili Web Crypto API behar kriptografikoentzat.</li> </ul>"},{"location":"eraso_defentsak/injekzioak/#3-a032021-injection-xss-html-injection-injekzioa","title":"3. A03:2021 - Injection (XSS, HTML Injection) (Injekzioa)","text":"<p>Kode gaiztoko injekzioa, hala nola XSS, sanitizatu gabeko input-en bidez.</p>"},{"location":"eraso_defentsak/injekzioak/#ezegonkorra_2","title":"Ezegonkorra:","text":"<p>Input-ak zuzenean innerHTML-n sartzea.</p> <pre><code>const userInput = document.getElementById('input').value;\ndocument.getElementById('output').innerHTML = userInput;\n</code></pre>"},{"location":"eraso_defentsak/injekzioak/#segurua_2","title":"Segurua:","text":"<p>Sanitizatu edukia DOMPurify erabiliz.</p> <pre><code>import DOMPurify from 'dompurify';\nconst userInput = document.getElementById('input').value;\nconst sanitized = DOMPurify.sanitize(userInput);\ndocument.getElementById('output').textContent = sanitized;\n</code></pre>"},{"location":"eraso_defentsak/injekzioak/#aholkuak_2","title":"Aholkuak:","text":"<ul> <li>Erabili textContent edo createTextNode innerHTML-ren ordez.</li> <li>Sanitizatu DOMPurify erabiliz.</li> <li>Inplementatu Content Security Policy (CSP).</li> </ul>"},{"location":"eraso_defentsak/injekzioak/#4-a042021-insecure-design-diseinu-ezegonkorra","title":"4. A04:2021 - Insecure Design (Diseinu Ezegonkorra)","text":"<p>Hasieratik mehatxuak kontuan hartzen ez dituzten diseinuak.</p>"},{"location":"eraso_defentsak/injekzioak/#ezegonkorra_3","title":"Ezegonkorra:","text":"<p>Logika kritikoa frontend-ean.</p> <pre><code>let precio = 100;\nif (userInput === \"BLACKFRIDAY\") {\n  precio = 1;\n}\n</code></pre>"},{"location":"eraso_defentsak/injekzioak/#segurua_3","title":"Segurua:","text":"<p>Kalkulua beti backend-ean.</p> <pre><code>fetch(\"/api/check-discount\", {\n  method: \"POST\",\n  body: JSON.stringify({ coupon: userInput })\n})\n</code></pre>"},{"location":"eraso_defentsak/injekzioak/#aholkuak_3","title":"Aholkuak:","text":"<ul> <li>Erabili threat modeling (adib., STRIDE).</li> <li>Balidatu input-ak Zod bezalako liburutegiekin.</li> <li>Diseinatu \"secure by default\" printzipioarekin.</li> </ul>"},{"location":"eraso_defentsak/injekzioak/#5-a052021-security-misconfiguration-segurtasun-konfigurazio-okerra","title":"5. A05:2021 - Security Misconfiguration (Segurtasun Konfigurazio Okerra)","text":"<p>Konfigurazio ezegunekorrak.</p>"},{"location":"eraso_defentsak/injekzioak/#ezegonkorra_4","title":"Ezegonkorra:","text":"<p>Liburutegi zaharrak erabiltzea edo barne erroreak erakustea.</p> <pre><code>console.error(\"Error: conexi\u00f3n a base de datos fallida en localhost:3306\");\n</code></pre>"},{"location":"eraso_defentsak/injekzioak/#segurua_4","title":"Segurua:","text":"<p>Liburutegi eguneratuak eta mezu generikoak erabiltzea.</p> <pre><code>console.error(\"Ha ocurrido un error, int\u00e9ntelo m\u00e1s tarde.\");\n</code></pre> <p>Beste adibide bat:</p>"},{"location":"eraso_defentsak/injekzioak/#ezegonkorra_5","title":"Ezegonkorra:","text":"<pre><code>fetch('https://api.example.com/data');\n</code></pre>"},{"location":"eraso_defentsak/injekzioak/#segurua_5","title":"Segurua:","text":"<pre><code>fetch('https://api.example.com/data', {\n  mode: 'cors',\n  credentials: 'same-origin',\n  headers: {\n    'X-Content-Type-Options': 'nosniff',\n    'X-Requested-With': 'XMLHttpRequest'\n  }\n});\n</code></pre>"},{"location":"eraso_defentsak/injekzioak/#aholkuak_4","title":"Aholkuak:","text":"<ul> <li>Konfiguratu CORS zorrotz backend-ean.</li> <li>Erabili segurtasun goiburuak.</li> <li>Eskaneatu konfigurazioak OWASP ZAP erabiliz.</li> </ul>"},{"location":"eraso_defentsak/injekzioak/#6-a062021-vulnerable-and-outdated-components-osagai-zaurgarri-eta-zaharkituak","title":"6. A06:2021 - Vulnerable and Outdated Components (Osagai Zaurgarri eta Zaharkituak)","text":"<p>Ahultasunak dituzten liburutegi zaharkituen erabilera.</p>"},{"location":"eraso_defentsak/injekzioak/#ezegonkorra_6","title":"Ezegonkorra:","text":"<pre><code>import _ from 'lodash'; // Versi\u00f3n &lt;4.17.13 vulnerable\n_.merge({}, JSON.parse(userInput));\n</code></pre>"},{"location":"eraso_defentsak/injekzioak/#segurua_6","title":"Segurua:","text":"<pre><code>import _ from 'lodash'; // \"^4.17.21\"\n_.merge({}, JSON.parse(userInput));\n</code></pre>"},{"location":"eraso_defentsak/injekzioak/#aholkuak_5","title":"Aholkuak:","text":"<ul> <li>Erabili npm audit edo Snyk.</li> <li>Eguneratu dependentziak erregulartasunez.</li> <li>Minimizatu dependentziak.</li> </ul>"},{"location":"eraso_defentsak/injekzioak/#7-a072021-identification-and-authentication-failures-identifikazio-eta-autentifikazio-hutsegiteak","title":"7. A07:2021 - Identification and Authentication Failures (Identifikazio eta Autentifikazio Hutsegiteak)","text":"<p>Autentifikazioaren kudeaketa txarra, tokenak esposatzen dituen modukoa.</p>"},{"location":"eraso_defentsak/injekzioak/#ezegonkorra_7","title":"Ezegonkorra:","text":"<p>Saio mugagabea gordetzea.</p> <pre><code>localStorage.setItem(\"jwt\", token);\n</code></pre>"},{"location":"eraso_defentsak/injekzioak/#segurua_7","title":"Segurua:","text":"<p>Iraungipen kontrolatua erabiltzea.</p> <pre><code>setTimeout(() =&gt; {\n  sessionStorage.removeItem(\"accessToken\");\n  alert(\"Tu sesi\u00f3n ha expirado\");\n  location.href = \"/login\";\n}, 15 * 60 * 1000); // 15 minutos\n</code></pre>"},{"location":"eraso_defentsak/injekzioak/#aholkuak_6","title":"Aholkuak:","text":"<ul> <li>Erabili OAuth/JWT iraungitzerekin.</li> <li>Inplementatu MFA backend-arekin.</li> <li>Ezabatu tokenak logout egitean.</li> </ul>"},{"location":"eraso_defentsak/injekzioak/#8-a082021-software-and-data-integrity-failures-software-eta-datu-integritate-hutsegiteak","title":"8. A08:2021 - Software and Data Integrity Failures (Software eta Datu Integritate Hutsegiteak)","text":"<p>Script-en karga egiaztapen gabe (adib., SRI gabe).</p>"},{"location":"eraso_defentsak/injekzioak/#ezegonkorra_8","title":"Ezegonkorra:","text":"<p>Script-ak balidazio gabe kargatzea.</p> <pre><code>&lt;script src=\"https://cdn.example.com/lib.js\"&gt;&lt;/script&gt;\n</code></pre>"},{"location":"eraso_defentsak/injekzioak/#segurua_8","title":"Segurua:","text":"<p>Subresource Integrity (SRI) erabiltzea.</p> <pre><code>&lt;script src=\"https://cdn.example.com/lib.js\"\n        integrity=\"sha384-xxxxx\"\n        crossorigin=\"anonymous\"&gt;&lt;/script&gt;\n</code></pre>"},{"location":"eraso_defentsak/injekzioak/#aholkuak_7","title":"Aholkuak:","text":"<ul> <li>Erabili Subresource Integrity (SRI).</li> <li>Egiaztatu checksumak.</li> <li>Saihestu CDN ez-fidagarriak.</li> </ul>"},{"location":"eraso_defentsak/injekzioak/#9-a092021-security-logging-and-monitoring-failures-segurtasun-log-eta-monitorizazio-hutsegiteak","title":"9. A09:2021 - Security Logging and Monitoring Failures (Segurtasun Log eta Monitorizazio Hutsegiteak)","text":"<p>Datuak esposatzen dituzten logak edo erasoak detektatu ezin dituztenak.</p>"},{"location":"eraso_defentsak/injekzioak/#ezegonkorra_9","title":"Ezegonkorra:","text":"<pre><code>console.log('Error with user:', userData);\n</code></pre>"},{"location":"eraso_defentsak/injekzioak/#segurua_9","title":"Segurua:","text":"<pre><code>console.error('Error occurred:', { code: error.code });\n</code></pre>"},{"location":"eraso_defentsak/injekzioak/#aholkuak_8","title":"Aholkuak:","text":"<ul> <li>Ez egin PII (Personally Identifiable Information) loggingik.</li> <li>Erabili Sentry bezalako tresnak.</li> <li>Mugatu logak produkzioan.</li> </ul>"},{"location":"eraso_defentsak/injekzioak/#10-a102021-server-side-request-forgery-ssrf-zerbitzari-aldeko-eskaera-faltsutzea","title":"10. A10:2021 - Server-Side Request Forgery (SSRF) (Zerbitzari Aldeko Eskaera Faltsutzea)","text":"<p>Barne baliabideetara request-ak egitera behartzen dituzten bezero eskaerak.</p>"},{"location":"eraso_defentsak/injekzioak/#ezegonkorra_10","title":"Ezegonkorra:","text":"<pre><code>const url = document.getElementById('urlInput').value;\nfetch(url);\n</code></pre>"},{"location":"eraso_defentsak/injekzioak/#segurua_10","title":"Segurua:","text":"<pre><code>const allowedUrls = ['https://api.example.com'];\nconst url = document.getElementById('urlInput').value;\nif (allowedUrls.some(allowed =&gt; url.startsWith(allowed))) {\n  fetch(url);\n}\n</code></pre>"},{"location":"eraso_defentsak/injekzioak/#aholkuak_9","title":"Aholkuak:","text":"<ul> <li>Erabili allowlist-ak URLentzat.</li> <li>Balidatu input-ak eskareentzat.</li> <li>Mugatu GET metodoetara ahal bada.</li> </ul>"},{"location":"eraso_defentsak/injekzioak/#hurrengo-urratsak","title":"Hurrengo urratsak","text":"<ul> <li>SQL injekzioak prebenitzeko trikimailu-orria</li> </ul>"},{"location":"eraso_defentsak/sarbide_kontrola/","title":"2.3 Sarbide-kontrola eta konfigurazio segurua","text":""},{"location":"eraso_defentsak/sarbide_kontrola/#sarbide-kontrol-motak","title":"Sarbide-kontrol motak","text":""},{"location":"eraso_defentsak/sarbide_kontrola/#1-rbac-role-based-access-control","title":"1. RBAC (Role-Based Access Control)","text":"<p>Erabiltzaileak rol ezberdinetan sailkatzen dira eta rol bakoitzak baimen multzo bat du.</p> <p>Adibidea (Node.js + Express):</p> <pre><code>// Rolen definizioa\nconst ROLES = {\n  ADMIN: 'admin',\n  EDITOR: 'editor',\n  USER: 'user',\n  BIDALI: 'bidali'\n};\n\n// Baimenen definizioa rol bakoitzarentzat\nconst PERMISSIONS = {\n  [ROLES.ADMIN]: ['irakurri', 'idatzi', 'ezabatu', 'aldatu', 'bidali'],\n  [ROLES.EDITOR]: ['irakurri', 'idatzi', 'bidali'],\n  [ROLES.USER]: ['irakurri', 'bidali'],\n  [ROLES.BIDALI]: ['bidali']\n};\n\n// Middleware baimenak egiaztatzeko\nfunction checkPermission(ekintza) {\n  return (req, res, next) =&gt; {\n    const erabiltzaileRola = req.user.rola; // Autentifikazio middlewaretik dator\n\n    if (!erabiltzaileRola || !PERMISSIONS[erabiltzaileRola] || \n        !PERMISSIONS[erabiltzaileRola].includes(ekintza)) {\n      return res.status(403).json({ error: 'Ez duzu baimenik ekintza hau egiteko' });\n    }\n    next();\n  };\n}\n\n// Erabilera adibidea\napp.delete('/api/erabiltzaileak/:id', \n  authenticateUser, // Lehenik autentifikatu\n  checkPermission('ezabatu'), // Ondoren baimena egiaztatu\n  (req, res) =&gt; {\n    // Kodea erabiltzailea ezabatzeko\n  }\n);\n</code></pre>"},{"location":"eraso_defentsak/sarbide_kontrola/#2-abac-attribute-based-access-control","title":"2. ABAC (Attribute-Based Access Control)","text":"<p>Erabiltzailearen eta baliabidearen atributuen arabera erabakitzen du sarbidea.</p> <p>Adibidea (Python + Policy):</p> <pre><code>from functools import wraps\n\ndef check_access(erabiltzailea, baliabidea, ekintza):\n    # Adibide sinple bat\n    if ekintza == \"irakurri\" and baliabidea.jabea == erabiltzailea.id:\n        return True\n    if ekintza == \"editatu\" and erabiltzailea.rola == \"admin\":\n        return True\n    if ekintza == \"bidali\" and erabiltzailea.egoera == \"aktiboa\":\n        return True\n    return False\n\ndef access_required(ekintza):\n    def decorator(f):\n        @wraps(f)\n        def decorated_function(*args, **kwargs):\n            erabiltzailea = get_jwt_identity()\n            baliabidea = get_baliabidea(kwargs['balibide_id'])\n\n            if not check_access(erabiltzailea, baliabidea, ekintza):\n                return {\"error\": \"Ez duzu baimenik\"}, 403\n\n            return f(*args, **kwargs)\n        return decorated_function\n    return decorator\n\n# Erabilera adibidea\n@app.route('/dokumentua/&lt;int:dokumentu_id&gt;', methods=['PUT'])\n@jwt_required()\n@access_required('editatu')\ndef editatu_dokumentua(dokumentu_id):\n    # Dokumentua editatzeko kodea\n    pass\n</code></pre>"},{"location":"eraso_defentsak/sarbide_kontrola/#idor-insecure-direct-object-reference-erasoak","title":"IDOR (Insecure Direct Object Reference) erasoak","text":""},{"location":"eraso_defentsak/sarbide_kontrola/#zer-da-idor","title":"Zer da IDOR?","text":"<p>Erabiltzaileak baliabideetarako sarbide zuzena duela uste duen baina benetan ez duenean gertatzen den segurtasun akatsa.</p>"},{"location":"eraso_defentsak/sarbide_kontrola/#nola-prebenitu","title":"Nola prebenitu?","text":"<ol> <li>Balidatu sarbidea baliabide bakoitzeko</li> </ol> <pre><code>// Adibidea Express.js-n\napp.get('/api/erabiltzaileak/:id', async (req, res) =&gt; {\n  try {\n    const erabiltzailea = await Erabiltzailea.findById(req.params.id);\n\n    // Egiaztatu erabiltzaileak baimena duen baliabidea ikusteko\n    if (req.user.id !== erabiltzailea.id &amp;&amp; req.user.rola !== 'admin') {\n      return res.status(403).json({ error: 'Ez duzu baimenik' });\n    }\n\n    res.json(erabiltzailea);\n  } catch (error) {\n    res.status(404).json({ error: 'Erabiltzailea ez da aurkitu' });\n  }\n});\n</code></pre> <ol> <li>Erabili UUID edo token seguruak ID sekuentzialen ordez</li> </ol> <pre><code>import uuid\nfrom django.db import models\n\nclass Dokumentua(models.Model):\n    # ID sekretua erabiliz\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    izena = models.CharField(max_length=255)\n    edukia = models.TextField()\n    jabea = models.ForeignKey(User, on_delete=models.CASCADE)\n\n# URL adibidea: /dokumentuak/3F2504E0-4F89-11D3-9A0C-0305E82C3301/\n</code></pre>"},{"location":"eraso_defentsak/sarbide_kontrola/#konfigurazio-segurua","title":"Konfigurazio segurua","text":""},{"location":"eraso_defentsak/sarbide_kontrola/#ingurunearen-araberako-konfigurazioa","title":"Ingurunearen araberako konfigurazioa","text":"<p>config/development.js</p> <pre><code>module.exports = {\n  // Garapenerako ezarpenak\n  database: {\n    host: 'localhost',\n    port: 5432,\n    name: 'nireapp_garapena',\n    user: 'postgres'\n  },\n  server: {\n    port: 3000,\n    debug: true,\n    cors: {\n      origin: ['http://localhost:8080']\n    }\n  },\n  auth: {\n    jwtSecret: 'garapeneko_giltza_bakarra',\n    passwordSaltRounds: 10\n  }\n};\n</code></pre> <p>config/production.js</p> <pre><code>module.exports = {\n  // Produkzioko ezarpenak\n  database: {\n    host: process.env.DB_HOST,\n    port: process.env.DB_PORT,\n    name: process.env.DB_NAME,\n    user: process.env.DB_USER,\n    password: process.env.DB_PASSWORD\n  },\n  server: {\n    port: process.env.PORT || 3000,\n    debug: false,\n    cors: {\n      origin: ['https://zureaplikazioa.eus']\n    }\n  },\n  auth: {\n    jwtSecret: process.env.JWT_SECRET,\n    passwordSaltRounds: 12\n  }\n};\n</code></pre>"},{"location":"eraso_defentsak/sarbide_kontrola/#konfigurazio-seguruaren-printzipioak","title":"Konfigurazio seguruaren printzipioak","text":"<ol> <li>Ez bidali konfigurazio sentikorrak koderik</li> <li>Erabili ingurune aldagaiak</li> <li> <p>Ez bidali <code>.env</code> fitxategia kontrol bertsioetara</p> </li> <li> <p>Segurtasun neurriak indartu <code>http    # HTTP headers seguruak (adibidea Express.js-ra)    X-Content-Type-Options: nosniff    X-Frame-Options: DENY    X-XSS-Protection: 1; mode=block    Content-Security-Policy: default-src 'self'    Strict-Transport-Security: max-age=31536000; includeSubDomains</code></p> </li> <li> <p>Erregistro seguruak (Logging)</p> </li> <li>Ez erregistratu datu sentikorrik (pasahitzak, tokenak, kredentzialak)</li> <li>Erabili maila egokiak (DEBUG, INFO, WARN, ERROR)</li> <li>Birbideratu erroreak monitorizaziorako sistemetara</li> </ol>"},{"location":"eraso_defentsak/sarbide_kontrola/#ariketa-praktikoa","title":"Ariketa praktikoa","text":"<ol> <li>Sortu RBAC sistema bat zure aplikazioan</li> <li>Inplementatu IDOR babesak zure APIetan</li> <li>Konfiguratu ingurune desberdinak (garapena, produkzioa)</li> <li>Egiaztatu zure HTTP headerek seguruak diren</li> </ol>"},{"location":"eraso_defentsak/sarbide_kontrola/#hurrengo-urratsak","title":"Hurrengo urratsak","text":"<ul> <li>Datu sentikorren kudeaketa segurua</li> <li>Atzera itzuli aurreko atalera</li> </ul>"},{"location":"oinarriak_mehatxuak/owasp_top10/","title":"1.3 Web ahultasun arrunten ikuspegi orokorra (OWASP Top 10)","text":""},{"location":"oinarriak_mehatxuak/owasp_top10/#zer-da-owasp-top-10","title":"Zer da OWASP Top 10?","text":"<p>OWASP (Open Web Application Security Project) erakundeak web aplikazioetako 10 arrisku kritikoen zerrenda eguneratzen du. 2021eko bertsioa da egungoa, baina uda honetan edo udazkenean berrizteko asmoa dute.</p> <p>OWASP Top 10</p> <p></p> <p>Aurreko irudian 2017 eta 2021-ren arteko ezberdintasunak ikus daitezke.</p>"},{"location":"oinarriak_mehatxuak/owasp_top10/#1-sarbide-kontrol-hauskorrak-broken-access-control","title":"1. Sarbide-kontrol hauskorrak (Broken Access Control)","text":"<p>Erabiltzaileek soilik baimendutako ekintzak bakarrik egin ditzaten mugatzea huts egiten duenean gertatzen da. OWASP Top 10 - Broken Access Control</p>"},{"location":"oinarriak_mehatxuak/owasp_top10/#adibideak","title":"Adibideak","text":"<ul> <li>Baimenik gabeko fitxategi pribatura sartzea</li> <li>Beste erabiltzaileen datuak editatzea</li> <li>Administrazio-funtzioetarako sarbidea izatea baimenik gabe</li> </ul>"},{"location":"oinarriak_mehatxuak/owasp_top10/#prebentzioa","title":"Prebentzioa","text":"<ul> <li>Sarbide-kontrola aplikatu lehentasunez</li> <li>\"Baimenik ez\" jarrerarekin hasi</li> <li>Erabiltzaile-zerbitzari aldean sarbidea egiaztatu</li> </ul> <p>Informazio gehiago &gt;&gt; Broken Access Control</p>"},{"location":"oinarriak_mehatxuak/owasp_top10/#2-zifraketa-akatsak-cryptographic-failures","title":"2. Zifraketa-akatsak (Cryptographic Failures)","text":"<p>Datuak zifratzeko erabiltzen diren ahultasunak edo akatsak. OWASP Top 10 - Cryptographic Failures</p>"},{"location":"oinarriak_mehatxuak/owasp_top10/#adibideak_1","title":"Adibideak","text":"<ul> <li>Datuak zifratu gabe transmititzea</li> <li>Zifratze ahula erabiltzea (MD5, SHA1, DES...)</li> <li>Gako pribatuen kudeaketa txarra</li> </ul>"},{"location":"oinarriak_mehatxuak/owasp_top10/#prebentzioa_1","title":"Prebentzioa","text":"<ul> <li>Erabili indarrean dauden zifratze estandarrak (AES, RSA...)</li> <li>HTTPS erabili beti</li> <li>Gakoak modu seguruan gorde</li> </ul> <p>Informazio gehiago &gt;&gt; Cryptographic Failures</p>"},{"location":"oinarriak_mehatxuak/owasp_top10/#3-injekzioa-injection","title":"3. Injekzioa (Injection)","text":"<p>Injekzioa gaur egungo web-aplikazioen segurtasunerako arrisku larrienetakoa da. Erasotzaileak datu maltzurrak sartzen ditu aplikazio batek interpretatzen dituen komando edo kontsulta batean. Horrela, aplikazioaren kontrola hartu, datu pertsonalak eskuratu edo datu-basea manipula dezake. OWASP Top 10 - Injection</p>"},{"location":"oinarriak_mehatxuak/owasp_top10/#adibideak_2","title":"Adibideak","text":"<ul> <li>SQL Injekzioa (SQL Injection): </li> </ul> <p>Hau da injekzio-eraso ohikoena. Datu-baseetan eragiten du.</p> <pre><code>-- Adibidez: Erabiltzailearen sarrera: ' OR '1'='1' --\n\n-- SQL kontsulta:\n\nSELECT * FROM users WHERE username = '' OR '1'='1' -- AND password = '...'\n\n-- Aurreko SQL-ean geratuko dena izango da guk sartutako kodearen ondoren dagoen guztia ez dela exekutatuko.\n</code></pre> <ul> <li>OS Komando Injekzioa (OS Command Injection): </li> </ul> <p>OS Komando Injekzioa ez da nabigatzailean gertatzen, baizik eta zerbitzarian. Erasoa egiteko, erasotzaileak webgunearen bidez lortzen du zerbitzariaren sistema eragilean komandoak sartzea eta exekutatzea.</p> <pre><code>-- Adibidez:\nping 127.0.0.1 ; ls -l\n\n-- Imajinatu web-aplikazio batek formulario bat duela, non erabiltzaileak IP helbide bat sartzen duen. Aplikazioak, atzealdean, sistema eragilearen ping komandoa exekutatzen du, helbidea eskuragarri dagoen egiaztatzeko.\nEmandako adibidearekin, ping egin ostean, ls -l exekutatzean, Unix eta Linux sistemetan, komando honek uneko direktorioko fitxategiak eta karpetak zerrendatzen ditu.\n</code></pre> <ul> <li>LDAP Injekzioa (LDAP Injection): </li> </ul> <p>LDAP protokoloa (Lightweight Directory Access Protocol) sareko direktorio-zerbitzuak atzitzeko eta kudeatzeko erabiltzen den protokolo estandar bat da. LDAP-en funtzio nagusia autentifikazioa eta baimenen kudeaketa zentralizatzea da.</p> <p>LDAP Injekzioa ez da nabigatzailean gertatzen, baizik eta zerbitzarian. Erasoa egiteko, erasotzaileak webgunearen bidez lortzen du zerbitzariaren sistema eragilean komandoak sartzea eta exekutatzea.</p> <pre><code>-- Adibidez:\n*)(uid=*))(|(uid=*\n\n-- Imajinatu web-aplikazio batek erabiltzaileen autentifikazioa LDAP zerbitzari baten bidez egiten duela. Erabiltzaileak bere UID (erabiltzaile-identifikatzailea) eta pasahitza sartzen ditu, eta aplikazioak LDAP kontsulta bat eraikitzen du horrekin.\n- Jatorrizko LDAP kontsulta (normalean ezkutuan):\n(uid=erabiltzailearen_sarrera)(userPassword=pasahitza)\n- Erasoa: Erasotzaileak LDAP sintaxiaren karaktere bereziak (adibidez, *, (, |) erabiltzen ditu kontsultaren logika aldatzeko. Horrek SQL Injekzioaren ' OR '1'='1' adibidearen antzeko efektua sortzen du.\n\n*)(uid=*))(|(uid=*\n\n- Lortutako kontsulta:\n(uid=*)(uid=*))(|(uid=*)(userPassword=pasahitza)\n\n- Ondorioa: Kontsulta hau, LDAP-ek aztertuta, hainbat baldintza sortzen ditu. Horrek uid eta pasahitz-baldintza originala saihesten du, eta erabiltzaile guztien datuak itzultzen ditu edo autentifikazioa gainditzen du. Erasotzaileak lortzen du LDAP zerbitzarian saioa hastea, pasahitza jakin gabe, edo erabiltzaile-informazio sentikorra lortzea.\n</code></pre>"},{"location":"oinarriak_mehatxuak/owasp_top10/#prebentzioa_2","title":"Prebentzioa","text":"<ul> <li>Parametro kontsultak erabili (prepared statements)</li> <li>ORM seguruak erabiliz, SQL kontsulta zuzenak saihestu</li> <li>Sarrera guztiak balioztatu eta garbitu</li> <li>Pribilegio minimoen printzipioa aplikatu</li> </ul> <p>Informazio gehiago &gt;&gt; Injection</p>"},{"location":"oinarriak_mehatxuak/owasp_top10/#4-diseinu-ez-segurua-insecure-design","title":"4. Diseinu ez segurua (Insecure Design)","text":"<p>Segurtasun-arazoak diseinu-fasean sortzen direnean, eta ez bakarrik inplementazioan. OWASP Top 10 - Insecure Design</p>"},{"location":"oinarriak_mehatxuak/owasp_top10/#adibideak_3","title":"Adibideak","text":"<ul> <li>Segurtasun-irizpiderik gabeko diseinua</li> <li>Mehatxuen eredurik ez</li> <li>Abusuzko erabileraren aurkako mekanismorik ez</li> </ul>"},{"location":"oinarriak_mehatxuak/owasp_top10/#prebentzioa_3","title":"Prebentzioa","text":"<ul> <li>Segurtasuna hasieratik kontuan hartu diseinuan</li> <li>Mehatxuen ereduak egin</li> <li>Abusu-kasuak identifikatu eta prebenitu</li> </ul> <p>Informazio gehiago &gt;&gt; Insecure Design</p>"},{"location":"oinarriak_mehatxuak/owasp_top10/#5-konfigurazio-oker-eta-ahula-security-misconfiguration","title":"5. Konfigurazio oker eta ahula (Security Misconfiguration)","text":"<p>Segurtasun-konfigurazio egokirik ez izatea edo konfigurazio okerrak izatea. OWASP Top 10 - Security Misconfiguration</p>"},{"location":"oinarriak_mehatxuak/owasp_top10/#adibideak_4","title":"Adibideak","text":"<ul> <li>Konfigurazio lehenetsiak aldatu gabe uztea</li> <li>Mezuen erakuspen detaileak erakustea</li> <li>Segurtasun-neurri osagarriak aktibatu gabe uztea</li> </ul>"},{"location":"oinarriak_mehatxuak/owasp_top10/#prebentzioa_4","title":"Prebentzioa","text":"<ul> <li>Konfigurazio seguru bat ezarri</li> <li>Automatizatu konfigurazioa</li> <li>Eguneratu eta berrikusi konfigurazioa maiz</li> </ul> <p>Informazio gehiago &gt;&gt; Security Misconfiguration</p>"},{"location":"oinarriak_mehatxuak/owasp_top10/#6-konponente-bulnerable-eta-zaharkituak-vulnerable-and-outdated-components","title":"6. Konponente bulnerable eta zaharkituak (Vulnerable and Outdated Components)","text":"<p>Hirugarreneko liburutegi eta osagaietan dauden ahultasunak. OWASP Top 10 - Vulnerable and Outdated Components</p>"},{"location":"oinarriak_mehatxuak/owasp_top10/#adibideak_5","title":"Adibideak","text":"<ul> <li>Ezagutzen diren ahultasunen berri ez izatea</li> <li>Eguneraketarik gabe uztea</li> <li>Osagai ez seguruak erabiltzea</li> </ul>"},{"location":"oinarriak_mehatxuak/owasp_top10/#prebentzioa_5","title":"Prebentzioa","text":"<ul> <li>Osagaiak eguneratu maiz</li> <li>Ez erabili osagai zaharkiturik</li> <li>Eskaneatu osagaiak ahultasunen bila</li> </ul> <p>Informazio gehiago &gt;&gt; Vulnerable and Outdated Components</p>"},{"location":"oinarriak_mehatxuak/owasp_top10/#7-autentifikazio-akatsak-identification-and-authentication-failures","title":"7. Autentifikazio-akatsak (Identification and Authentication Failures)","text":"<p>Erabiltzaileak identifikatu eta autentifikatzeko arazoak. OWASP Top 10 - Identification and Authentication Failures</p>"},{"location":"oinarriak_mehatxuak/owasp_top10/#adibideak_6","title":"Adibideak","text":"<ul> <li>Pasahitz ahulak onartzea</li> <li>Saio-kudeaketa txarra</li> <li>Autentifikazio-funtzionaltasun ahulak</li> </ul>"},{"location":"oinarriak_mehatxuak/owasp_top10/#prebentzioa_6","title":"Prebentzioa","text":"<ul> <li>Inplementatu autentifikazio anizkoitza (2FA)</li> <li>Erabili pasahitz-politika sendoak</li> <li>Egiaztatu saio-identifikatzaileak</li> </ul> <p>Informazio gehiago &gt;&gt; Identification and Authentication Failures</p>"},{"location":"oinarriak_mehatxuak/owasp_top10/#8-datuak-eta-datuen-osotasunaren-galera-software-and-data-integrity-failures","title":"8. Datuak eta datuen osotasunaren galera (Software and Data Integrity Failures)","text":"<p>Datuen osotasuna eta jatorriaren ziurtasuna arriskuan jartzen direnean. OWASP Top 10 - Software and Data Integrity Failures</p>"},{"location":"oinarriak_mehatxuak/owasp_top10/#adibideak_7","title":"Adibideak","text":"<ul> <li>Kode edo datu aldaketa baimenik gabe</li> <li>Erabiltzailearen sarrerak egiaztatu gabe</li> <li>Sinadura digitalik gabeko kodeak</li> </ul>"},{"location":"oinarriak_mehatxuak/owasp_top10/#prebentzioa_7","title":"Prebentzioa","text":"<ul> <li>Erabili sinadura digitalak</li> <li>Egiaztatu kode eta datuen jatorria</li> <li>Inplementatu osotasunaren egiaztapena</li> </ul> <p>Informazio gehiago &gt;&gt; Software and Data Integrity Failures</p>"},{"location":"oinarriak_mehatxuak/owasp_top10/#9-segurtasunaren-monitorizazio-falta-security-logging-and-monitoring-failures","title":"9. Segurtasunaren monitorizazio falta (Security Logging and Monitoring Failures)","text":"<p>Erasoak detektatu eta erantzuteko gaitasun falta. OWASP Top 10 - Security Logging and Monitoring Failures</p>"},{"location":"oinarriak_mehatxuak/owasp_top10/#adibideak_8","title":"Adibideak","text":"<ul> <li>Erregistroak gordetzeko konfiguraziorik ez</li> <li>Alertarik ez jasotzea</li> <li>Erantzun-prozedurarik ez izatea</li> </ul>"},{"location":"oinarriak_mehatxuak/owasp_top10/#prebentzioa_8","title":"Prebentzioa","text":"<ul> <li>Ezarri erregistro-sistema egokia</li> <li>Konfiguretu alerta automatikoak</li> <li>Planifikatu erantzun-prozedurak</li> </ul> <p>Informazio gehiago &gt;&gt; Security Logging and Monitoring Failures</p>"},{"location":"oinarriak_mehatxuak/owasp_top10/#10-zerbitzariaren-aldeko-eskaera-faltsuketa-server-side-request-forgery-ssrf","title":"10. Zerbitzariaren aldeko eskaera-faltsuketa (Server-Side Request Forgery - SSRF)","text":"<p>Erasotzaileak zerbitzariak barne-sarean egindako eskaerak kontrolatzen dituenean. OWASP Top 10 - Server-Side Request Forgery</p>"},{"location":"oinarriak_mehatxuak/owasp_top10/#adibideak_9","title":"Adibideak","text":"<ul> <li>Barne-zerbitzuei eskaerak egitea</li> <li>Konfigurazio-informazioa eskuratzea</li> <li>Barne-sareko baliabideetara sartzea</li> </ul>"},{"location":"oinarriak_mehatxuak/owasp_top10/#prebentzioa_9","title":"Prebentzioa","text":"<ul> <li>Egiaztatu eta iragazi sarrerako URL guztiak</li> <li>Erabili zerrenda zuri bat onartutako helbideentzako</li> <li>Ezarri konexio-mugen eta denbora-mugen politika</li> </ul> <p>Informazio gehiago &gt;&gt; Server-Side Request Forgery</p>"},{"location":"oinarriak_mehatxuak/owasp_top10/#hurrengo-urratsak","title":"Hurrengo urratsak","text":"<ul> <li>Injekzioen aurkako defentsak</li> </ul>"},{"location":"oinarriak_mehatxuak/sarrera/","title":"1.1 Web Garapenean Zibersegurtasunaren Sarrera","text":""},{"location":"oinarriak_mehatxuak/sarrera/#zergatik-da-garrantzitsua-zibersegurtasuna-web-garapenean","title":"Zergatik da garrantzitsua zibersegurtasuna web garapenean?","text":"<p>Web aplikazioak gaur egun enpresen eta erabiltzaileen datu sentikorren biltegi gisa funtzionatzen dute. Zibersegurtasuna ezartzeak honako hauek babesten laguntzen du:</p> <ul> <li>Erabiltzaileen datu pribatuen konfidentzialtasuna</li> <li>Webgunearen osotasuna eta erabilgarritasuna</li> <li>Enpresaren ospea eta konfiantza</li> <li>Lege betetzea (GDPR, CCPA, etab.)</li> </ul>"},{"location":"oinarriak_mehatxuak/sarrera/#garatzailearen-rola-shift-left-ikuspegia","title":"Garatzailearen rola, \"Shift Left\" ikuspegia","text":"<p>Tradizionalki, segurtasuna garapen prozesuaren amaieran kontuan hartzen zen. \"Shift Left\" ikuspegiak segurtasuna garapenaren hasieran txertatzea proposatzen du:</p> <ul> <li>Aurretiko prebentzioa: Akatsak sortu aurretik konpontzea</li> <li>Kostu murrizketa: Arazoen aurrekariak aurkitzea merkeagoa da</li> <li>Kode kalitate hobea: Segurtasuna kodearen zati integrala bihurtzen da</li> </ul>"},{"location":"oinarriak_mehatxuak/sarrera/#cia-triangelua-konfidentzialtasuna-osotasuna-erabilgarritasuna","title":"CIA triangelua (Konfidentzialtasuna, Osotasuna, Erabilgarritasuna)","text":"<p>Zibersegurtasunaren oinarrizko printzipioak:</p> <pre><code>1. Konfidentzialtasuna (Confidentiality)\n\n- Sarbide kontrol egokia\n- Datuen zifraketa\n- Baimendutako pertsonek soilik sarbidea\n\n2. Osotasuna (Integrity)\n\n- Datuen zehaztasuna eta osotasuna bermatzeko mekanismoak\n- Ez-legezko aldaketak detektatzeko sistemak\n- Transakzioen jarraipena\n\n3. Erabilgarritasuna (Availability)\n\n- Zerbitzuaren jarraitasuna\n- Erasoak eta huts-egoerak kudeatzeko gaitasuna\n- Errendimendu egokia\n</code></pre>"},{"location":"oinarriak_mehatxuak/sarrera/#mehatxua-ahultasuna-arriskua","title":"Mehatxua, ahultasuna, arriskua","text":"<p>Zibermehatxuak, ahultasunak eta arriskuak ulertzea funtsezkoa da:</p> <ul> <li> <p>Mehatxua (Threat): sistemaren aurkako kalte bat eragin dezakeen gertakari edo aktore bat.</p> </li> <li> <p>Ahultasuna (Vulnerability): sistemaren puntu ahul bat, erasotzaile batek aprobetxa dezakeena.</p> </li> <li> <p>Arriskua (Risk): mehatxu batek ahultasun bat erabiliz kalte bat eragiteko probabilitatea eta inpaktua.</p> </li> </ul>"},{"location":"oinarriak_mehatxuak/sarrera/#diseinu-segurua","title":"Diseinu segurua","text":""},{"location":"oinarriak_mehatxuak/sarrera/#segurtasuna-diseinutik-security-by-design","title":"Segurtasuna Diseinutik (Security by Design)","text":"<p>Segurtasuna ez da gehigarri bat, baizik eta diseinuaren parte izan behar du. Horretarako hurrengo puntuak aplikatu behar dira beti:</p> <ul> <li>Segurtasuna garapenaren hasieran txertatzea</li> <li>Oinarrizko segurtasun printzipioak aplikatzea</li> <li>Defektuz seguruak diren konfigurazioak erabiltzea</li> </ul>"},{"location":"oinarriak_mehatxuak/sarrera/#sakoneko-defentsa-defense-in-depth","title":"Sakoneko Defentsa (Defense in Depth)","text":"<p>Segurtasunaren babes sistema geruza ezberdinetan antolatzea da, bakoitzak bere babesa eskaintzen duena. Horrela, geruza batek huts egiten badu, hurrengoak oraindik babesa eskain dezake eta erasoa geldiarazi edo mugatu daiteke. Horretarako: </p> <ul> <li>Segurtasun geruza anitzak ezartzea</li> <li>Hainbat defentsa mekanismo erabiltzea</li> <li>Erasotzaileak geruza bat gainditzen badu, beste batek geldiarazteko aukera izatea</li> </ul>"},{"location":"oinarriak_mehatxuak/sarrera/#pribilegio-gutxiena-least-privilege","title":"Pribilegio Gutxiena (Least Privilege)","text":"<p>Erabiltzaile edo prozesu batek egin behar duena bakarrik egiteko baimena izatea. Hau da: </p> <ul> <li>Erabiltzaile eta prozesuei beraien eginkizuna betetzeko behar duten baimen minimoak ematea</li> <li>Administratzaile baimenak mugatzea</li> <li>Baimenen kudeaketa aktiboa</li> </ul>"},{"location":"oinarriak_mehatxuak/sarrera/#hurrengo-urratsak","title":"Hurrengo urratsak","text":"<ul> <li>Webaren funtzionamenduaren oinarriak</li> <li>Web ahultasun arrunten ikuspegi orokorra</li> </ul>"},{"location":"oinarriak_mehatxuak/web_hacking_sarrera/","title":"Web Hacking-erako sarrera","text":""},{"location":"oinarriak_mehatxuak/web_hacking_sarrera/#walking-an-application","title":"Walking An Application","text":"<p>Ikusiko dugu web aplikazio bat eskuz nola aztertu segurtasun arazoak aurkitzeko, nabigatzailearen tresna integratuak soilik erabiliz. Gehienetan, segurtasun tresna automatizatuek eta scriptek ahultasun potentzial eta informazio erabilgarri asko galduko dituzte.</p> <p>Hona hemen gela osoan zehar erabiliko dituzun nabigatzailearen tresna integratuen laburpen labur bat:</p> <ul> <li>Iturria ikusi (View Source): Nabigatzailea erabili webgune baten giza irakurgarria den iturburu-kodea ikusteko.</li> <li>Ikuskatzailea (Inspector): Orrialdeko elementuak nola aztertu eta aldaketak nola egin ikasi, normalean blokeatutako edukia ikusteko.</li> <li>Araztailea (Debugger): Orrialde baten JavaScript-aren fluxua aztertu eta kontrolatu.</li> <li>Sarea (Network): Orrialde batek egiten dituen sare-eskaera guztiak ikusi.</li> </ul>"},{"location":"oinarriak_mehatxuak/web_hacking_sarrera/#exploring-the-website","title":"Exploring The Website","text":"<p>Penetrazio probatzaile gisa, zure rola webgune edo web aplikazio bat aztertzean da ahulak izan daitezkeen ezaugarriak aurkitzea eta horiek ustiatzen saiatzea ahulak diren ala ez ebaluatzeko. Ezaugarri hauek normalean webgunearen erabiltzailearekin elkarrekintzaren bat eskatzen duten zatiak izaten dira. Webgunearen zati interaktiboak aurkitzea hain erraza izan daiteke login formulario bat ikustea bezain erraza, edota webgunearen JavaScript-a eskuz aztertzea bezain konplexua. Hasteko leku bikaina da nabigatzailearekin webgunea esploratzea eta orrialde/area/ezaugarri indibidualak ohar hartzea, bakoitzaren laburpen batekin. Acme IT Support webgunearen azterketa adibide bat honelakoa izango litzateke:</p>"},{"location":"oinarriak_mehatxuak/web_hacking_sarrera/#orriaren-iturburua-ikustea","title":"Orriaren iturburua ikustea","text":"<p>Webgune bat bisitatzen dugunean, gure nabigatzaileak eskaera bat egiten dio zerbitzariari, eta horrek kode bat itzultzen du: hau da page source edo orrialdearen iturburua. Kode horrek adierazten dio nabigatzaileari zer eduki erakutsi, nola aurkeztu eta nola jokatu behar duen. Iturburuko kodean HTML, CSS eta JavaScript izaten dira:</p> <pre><code>- **HTML** edukia eta egitura adierazteko.\n- **CSS** itxura definitzeko (koloreak, letra-tamaina\u2026).\n- **JavaScript** funtzionaltasun interaktiboak gehitzeko.\n</code></pre> <p>Orrialdearen iturburua begiratzea oso erabilgarria izan daiteke webgune bati buruzko informazio gehiago jasotzeko, batez ere segurtasunari buruzko ikuspuntutik.</p>"},{"location":"oinarriak_mehatxuak/web_hacking_sarrera/#nola-ikusten-dut-orriaren-iturburua","title":"Nola ikusten dut orriaren iturburua?","text":"<p>Page source-a ikusteko modu hauek daude:</p> <pre><code>- Webgune baten gainean saguaren eskuin botoiaz klik eginda, \"Ikusi orriaren iturburua\" (edo antzeko) aukera agertzen da.\n- Nabigatzaileko URLa honela alda daiteke:\n</code></pre> <p>view-source:https://www.adibidea.com     - Nabigatzailearen menuan, \"Developer tools\" edo \"Tresna gehiago\" izeneko ataletan ere aurki daiteke aukera hau.</p>"},{"location":"oinarriak_mehatxuak/web_hacking_sarrera/#ikus-dezagun-jatorrizko-orrialderen-bat","title":"Ikus dezagun jatorrizko orrialderen bat?","text":"<p>Page source-a ikusita, hainbat elementu interesgarri aurki ditzakegu:</p> <pre><code>- Iruzkinak (&lt;!-- ... --&gt;): programatzaileek kodean uzten dituzten oharrak dira. Ez dira orrian agertzen, baina pistak eman ditzakete (adib. orri bat behin-behinekoa dela esatea).\n- Estekak (&lt;a href=\"...\"&gt;): orriko beste atal edo orrialdeetara eramaten gaituzten loturak dira. Batzuetan, ezkutuko estekak ere aurki daitezke.\n- Kanpoko fitxategiak (CSS, JS, irudiak...): HTMLn bidez lotuta egoten dira. Batzuetan, direktorio osoa ikusgai egoten da konfigurazio akatsengatik.\n- Frameworkaren aipamenak: Webgunea framework batekin egina badago, kodean bere izena eta bertsioa ager daitezke. Bertsio zaharra bada, segurtasun arriskuak egon daitezke.\n</code></pre>"},{"location":"oinarriak_mehatxuak/web_hacking_sarrera/#garatzaile-tresnak-developers-tools","title":"Garatzaile Tresnak (Developers Tools)","text":""},{"location":"oinarriak_mehatxuak/web_hacking_sarrera/#1-inspektorea","title":"1. Inspektorea","text":"<p>Web-orrian une horretan agertzen denaren \u201cargazki bizia\u201d erakusten du. Orriko iturburu-kodea (HTML) beti ez da berdina, CSS edo JavaScript-ek alda dezakeelako. Inspektoreak benetan zer ikusten ari garen erakusten digu. Elementuak zuzenean alda ditzakezu: testua, koloreak, tamainak\u2026 horrela, akatsak errazago aurkitzen eta konpontzen dira.</p>"},{"location":"oinarriak_mehatxuak/web_hacking_sarrera/#2-debugger","title":"2. Debugger","text":"<p>Orriko JavaScript kodeari pausoz pauso jarraitzeko balioko digu.</p> <p>\u201cBreakpoint\u201d-ak jartzen dira, hau da, kodea geldi dadin nahi dugun puntuan. Horri esker, aldagaiak eta funtzio-deien emaitzak une berean ikus ditzakegu, eta ulertu zergatik gertatzen diren akatsak.</p> <p>Garatzaileen tresnetako panel hau JavaScript arazteko pentsatuta dago, eta berriro ere ezaugarri bikaina da zerbait zergatik ez dabilen funtzionatzen landu nahi duten web garatzaileentzat. Baina sartze-probatzaile gisa, JavaScript kodean sakontzeko aukera ematen digu. Firefox eta Safari nabigatzaileetan ezaugarri honek Debugger du izena, baina Google Chrome nabigatzailean Sources du izena.</p> <p>Laburbilduz, breakpointak menderatzeak bezero-kodearen exekuzioa erabat kontrolatzen du:</p> <ul> <li>Irakurketa: barne aldagaiak eta funtzio \u201cpribatuak\u201d ikusten dituzu.</li> <li>Aldaketa: balio berriak injektatzen dituzu edo funtzionalitateak mozten dituzten kodearen adarrak saihesten dituzu.</li> <li>Birbidaltzea: harrapaketak eta irteerako eskaerak aldatzea.</li> </ul> <p>Hori guztia, segurtasun-ikuskaritzei, pentestei edo arazketa sinpleari aplikatuta, logika-ahultasunak aurkitzeko, sarbide-kontrolak ez egiteko edo garatzaileak zuzenean azaldu nahi izan ez zituen datu sentikorrak aurkitzeko aukera ematen du.</p>"},{"location":"oinarriak_mehatxuak/web_hacking_sarrera/#3-network","title":"3. Network","text":"<p>Garatzailearen tresnen sare-fitxa web orri batek egiten duen kanpoko eskaera bakoitzaren jarraipena egiteko erabil daiteke. Sarea fitxan klik egin eta gero orria freskatzen baduzu, orria eskatzen ari den fitxategi guztiak ikusiko dituzu.</p>"},{"location":"oinarriak_mehatxuak/web_hacking_sarrera/#edukien-aurkikuntza","title":"Edukien Aurkikuntza","text":""},{"location":"oinarriak_mehatxuak/web_hacking_sarrera/#zer-da-edukien-aurkikuntza","title":"Zer da edukien aurkikuntza?","text":"<p>Lehenik eta behin, galdetu behar dugu, web aplikazioen segurtasunaren testuinguruan, zer da edukia? Edukia gauza asko izan daiteke, fitxategi bat, bideoa, irudia, segurtasun-kopia, webgunearen eginbidea. Edukien aurkikuntzaz hitz egiten dugunean, ez gara webgune batean ikus ditzakegun gauza nabariez ari; berehala aurkezten ez zaizkigun eta beti sarbide publikora bideratuta ez zeuden gauzez ari gara.</p> <p>Eduki hori izan liteke, adibidez, langileen erabilerarako orriak edo atariak, webgunearen bertsio zaharragoak, babeskopia-fitxategiak, konfigurazio-fitxategiak, administrazio-panelak, etab. Edukiak ezagutzeko hiru modu nagusi daude landuko dugun webgune batean: Eskuz, automatizatua eta OSINT (Open-Source Intelligence).</p>"},{"location":"oinarriak_mehatxuak/web_hacking_sarrera/#robotstxt","title":"Robots.txt","text":"<p><code>robots.txt</code> fitxategia bilatzaileei zein orri diren eta bilatzaileen emaitzetan erakusteko baimenik ez duten edo bilatzaile zehatzei webgunea guztiz arakatzea debekatzen dien dokumentua da. Ohikoa izan daiteke web gune jakin batzuk mugatzea bilatzaileen emaitzetan ez bistaratzeko. Orrialde hauek administrazio atariak edo webgunearen bezeroentzako fitxategiak izan daitezke. Fitxategi honek webguneko kokapenen zerrenda handia ematen digu, jabeek sartze-probatzaile gisa aurkitzerik nahi ez dutena.</p>"},{"location":"oinarriak_mehatxuak/web_hacking_sarrera/#favicon","title":"Favicon","text":"<p>Favicon nabigatzaileko helbide-barran edo fitxan agertzen den ikono txiki bat da, webgune bat markatzeko erabiltzen dena.</p> <p>Batzuetan, webgune bat eraikitzeko markoak erabiltzen direnean, instalazioaren parte den favicon bat soberan geratzen da, eta webgunearen garatzaileak hau pertsonalizatutako beste batekin ordezkatzen ez badu, horrek pista bat eman diezaguke erabiltzen ari den markoari buruz. OWASPek esparru-ikono komunen datu-base bat ostatatzen du, helburuen favicon-arekin OWASP_favicon_database. Alderatzeko erabil dezakezuna. Behin esparru-pila ezagututa, kanpoko baliabideak erabil ditzakegu hari buruz gehiago jakiteko. Eguneratuago dago beste webgune hau: OWASP_favicon_database </p>"},{"location":"oinarriak_mehatxuak/web_hacking_sarrera/#sitemapxml","title":"Sitemap.xml","text":"<p><code>robots.txt</code> fitxategiak ez bezala, bilaketa-motorreko arakatzaileek ikus dezaketena murrizten baitu, <code>sitemap.xml</code> fitxategiak webgunearen jabeak bilatzaile batean zerrendatzea nahi duen fitxategi bakoitzaren zerrenda ematen du.  Horiek, batzuetan, nabigatzeko zailxeagoak diren webguneko eremuak izan ditzakete, edo baita uneko guneak jada erabiltzen ez dituen baina eszenen atzean lanean jarraitzen duten web orri zahar batzuk zerrendatzea ere.</p>"},{"location":"oinarriak_mehatxuak/web_hacking_sarrera/#http-goiburuak","title":"HTTP Goiburuak","text":"<p>Web-zerbitzariari eskaerak egiten dizkiogunean, zerbitzariak hainbat HTTP goiburu itzultzen ditu. Goiburu horiek, batzuetan, informazio erabilgarria izan dezakete, hala nola webzerbitzariaren softwarea eta, agian, erabiltzen ari den programazio-/script-lengoaia. </p> <p>Beheko adibidean, webzerbitzaria NGINX 1.18.0 bertsioa da eta PHP 7.4.3 bertsioa exekutatzen du. Informazio hori erabiliz, erabiltzen ari diren softwarearen bertsio ahulak aurki genitzake.</p> <p>Saiatu beheko curl komandoa web zerbitzariaren aurka exekutatzen, non -v kommutadoreak verbose modua gaitzen duen, goiburuak aterako dituena (zerbait interesgarria egon daiteke! ).</p>"},{"location":"oinarriak_mehatxuak/web_hacking_sarrera/#framework-stack","title":"Framework Stack","text":"<p>Webgune baten markoa ezarri ondoren, bai aurreko favicon adibidearekin edo orriaren iturburuan pistak bilatuz, hala nola iruzkinak, copyright oharrak edo kredituak, ondoren webgunearen framework-a aurki dezakezu.  Hortik aurrera, softwareari eta beste informazio batzuei buruz gehiago ikasi ahal izango dugu, agian aurkitu dezakegun eduki gehiagora eramanez.</p>"},{"location":"oinarriak_mehatxuak/web_oinarriak/","title":"1.2 Webaren funtzionamenduaren oinarriak","text":""},{"location":"oinarriak_mehatxuak/web_oinarriak/#sarrera","title":"Sarrera","text":"<p>Webguneen funtzionamendua ulertzea ezinbestekoa da zibersegurtasunaren ikuspegitik. Atal honetan, webguneek nola funtzionatzen duten azalduko dugu, haien osagai nagusiak eta haien arteko komunikazioa.</p>"},{"location":"oinarriak_mehatxuak/web_oinarriak/#webgune-batek-nola-funtzionatzen-duen","title":"Webgune batek nola funtzionatzen duen","text":""},{"location":"oinarriak_mehatxuak/web_oinarriak/#dns-domain-name-system","title":"DNS (Domain Name System)","text":"<p>Webgune bat funtzionatzeko hainbat osagai eta prozesu automatizatu elkarlanean aritzen dira. Lehenik, DNS sistema erabiltzen da domeinu bat (adib. google.com) IP helbide batera itzultzeko. Domeinuek hierarkia bat jarraitzen dute (azpidomeinuak, bigarren mailako domeinuak, TLD-ak), eta DNS erregistro ezberdinak (A, AAAA, CNAME, MX, TXT\u2026) informazio mota desberdinak eskaintzen dituzte.</p> <p></p> <p>DNS eskaera bat egiterakoan, lehenik cachea begiratzen da; ondoren, ISParen DNS zerbitzaria, erro zerbitzariak, TLD zerbitzariak eta autoritatezko zerbitzariak aktibatzen dira IP helbidea lortu arte. Eskaeraren erantzunak TTL (Time To Live) du, cachean zenbat denboraz gorde behar den zehazteko.</p> <p></p> <pre><code>    1. Urratsa: Zure Ordenagailua\n    Lehenik bere cache lokalean begiratzen du.  Baliteke duela gutxi webgune hori bisitatu izana eta IP helbidea oroitzea.\n    Emaitza:\n    \u2705 Aurkitzen badu: Zuzenean konektatzen da\n    \u274c Ez badu aurkitzen: Hurrengo urratsera pasatzen da\n\n\n    2. Urratsa: Rekurtsiboko DNS Zerbitzaria\n    Zure Internet hornitzaileak (ISP) ematen duen zerbitzaria (edo zuk aukeratutako bat).\n    Berak ere bere cache lokalean begiratzen du.\n    Adibidez, Google, Facebook, Twitter bezalako webgune ospetsuak maiz bilatu ohi dira, beraz seguruenik hemen aurkituko ditu.\n    Emaitza:\n    \u2705 Aurkitzen badu: Itzultzen dio zure ordenagailuari\n    \u274c Ez badu aurkitzen: Interneten erro-zerbitzarietara joaten da\n\n\n    3. Urratsa: Erro-zerbitzariak (Root DNS)\n    Interneten \"bizkarrezurra\" dira hauek . TLD (.com, .org, .es...) begiratzen dute eta egokiko TLD zerbitzarira bidaltzen zaituzte.\n    Gure adibidean: www.tryhackme.com-en .com ikusten dute eta .com TLD zerbitzarira bidaltzen zaituzte.\n\n    4. Urratsa: TLD Zerbitzaria\n    Domeinuaren autoritatezko zerbitzaria non dagoen esaten du.\n    Adibidez, tryhackme.com domeinuaren autoritatezko zerbitzariak dira:\n    kip.ns.cloudflare.com\n    uma.ns.cloudflare.com\n\n    Bi egoten dira, bat hondatzen bada, bestea erabiltzeko (babeskopia).\n\n    5. Urratsa: Autoritatezko DNS Zerbitzaria\n    Domeinu horren DNS erregistro guztiak gordetzen dituen zerbitzaria.\n    Zer egiten du?\n    Behar den IP helbidea bilatzen du (A erregistroa)\n    Itzultzen du Rekurtsiboko DNS zerbitzarira\n    Rekurtsibokoak bere cache-an gordetzen du etorkizuneko eskaeretarako\n    Azkenean zure ordenagailuari bidaltzen dio\n</code></pre>"},{"location":"oinarriak_mehatxuak/web_oinarriak/#http-xehetasunez","title":"HTTP xehetasunez","text":"<p>IP helbidea lortuta, HTTP edo HTTPS bidezko eskaera egiten da zerbitzarira. </p> <p>Web zerbitzariekin komunikatzeko eta webguneetako datuak transmititzeko arau multzoa da. </p> <p>Mota askotako datuak trasmititu ditzake: </p> <ul> <li>HTML (webgunearen edukia)</li> <li>Irudiak (JPG, PNG, GIF...)</li> <li>Bideoak (MP4, AVI...)</li> <li>Bestelako fitxategiak (PDF, dokumentuak...)</li> </ul> <p>HTTPS bertsioa segurua da eta komunikazioa zifratzen du. </p> <p>HTTP eskaerek goiburuak daramatzate (Host, User-Agent, Cookie...), eta zerbitzariak HTTP erantzuna itzultzen du: egoera kode batekin (200, 404, 500...) eta eduki batekin (HTML, JSON, irudiak...).</p> <p>URL egitura honek hainbat atal ditu: protokoloa, erabiltzailea, ostalaria, ataka, bidea, parametroak eta fragmentua. Eskaeraren arabera, zerbitzariak baliabide jakin bat itzultzen du.</p> <p>Adibide hau hartzen badugu: http://user:password@tryhackme.com:80/view-room?id=1#task3</p> <p></p> <ul> <li>Scheme (Eskema): http zatia da erabili beharreko protokoloa adierazten duena. HTTP, HTTPS edo FTP izan daiteke adibidez.</li> <li>User (Erabiltzailea): user:password zatia da sarbidea behar duten zerbitzuetarako erabiltzaile-izena eta pasahitza. Gaur egun ez da asko erabiltzen ez delako segurua.</li> <li>Host (Ostalaria): tryhackme.com zatia da zerbitzariaren domeinu-izena edo IP helbidea. google.com edo 192.168.1.1 bezalako zerbait izan daiteke.</li> <li>Port (Ataka): 80 zatia da zerbitzariaren ataka zenbakia. HTTP-rentzat 80 da lehenetsita, eta HTTPS-rentzat 443. Edozein zenbaki izan daiteke 1etik 65535era.</li> <li>Path (Bidea): /view-room zatia da nahi dugun fitxategiaren edo orriaren kokapena. /blog edo /images/photo.jpg bezalako zerbait izan daiteke.</li> <li>Query String (Kontsulta katea): ?id=1 zatia da informazio gehigarria bidaltzeko. /blog?id=1&amp;category=tech adibidez.</li> <li>Fragment (Zatia): #task3 zatia da orriaren zati zehatz batera joateko. Orri luze batean sekzioa jakin batera salto egiteko erabiltzen da.</li> </ul>"},{"location":"oinarriak_mehatxuak/web_oinarriak/#http-metodoak","title":"HTTP Metodoak","text":"<p>HTTP metodoak bezeroari bere asmoa adierazteko modu bat dira HTTP eskaera bat egiterakoan. HTTP metodo asko daude, baina ohikoenak azalduko ditugu, nahiz eta gehienetan GET eta POST metodoekin lan egingo duzun.</p> <ul> <li> <p>GET Eskaera Web zerbitzari batetik informazioa lortzeko erabiltzen da. Adibidez, web orri bat ikusteko edo datu batzuk eskuratzeko.</p> </li> <li> <p>POST Eskaera Web zerbitzarira datuak bidaltzeko eta, litekeena da, erregistro berriak sortzeko erabiltzen da. Formulario bat betetzean, adibidez.</p> </li> <li> <p>PUT Eskaera Web zerbitzarira datuak bidaltzeko eta dagoeneko badagoen informazioa eguneratzeko erabiltzen da.</p> </li> <li> <p>DELETE Eskaera Web zerbitzaritik informazioa edo erregistroak ezabatzeko erabiltzen da.</p> </li> </ul>"},{"location":"oinarriak_mehatxuak/web_oinarriak/#http-egoera-kodeak","title":"HTTP Egoera Kodeak","text":"<p>HTTP egoera kodeak zerbitzariak eskaeraren erantzun egoera adierazten ditu. </p> <p>Egoera kode hauek 5 talde ezberdinetan banatu daitezke:</p> <ul> <li>100-199 - Informazio Erantzuna</li> </ul> <p>Hauek bezeroari jakinarazteko bidaltzen dira bere eskeararen lehen zatia onartu dela eta gainerakoa bidaltzen jarraitu behar duela. Kode hauek ez dira jada oso ohikoak.</p> <ul> <li>200-299 - Arrakasta</li> </ul> <p>Kode talde hau bezeroari bere eskaera ondo burutu dela jakinarazteko erabiltzen da.</p> <ul> <li>300-399 - Birbideraketa</li> </ul> <p>Bezeroaren eskaera beste baliabide batera birbideratzeko erabiltzen dira. Hau beste web orri batera edo osorik beste webgune batera izan daiteke.</p> <ul> <li>400-499 - Bezeroaren Erroreak</li> </ul> <p>Bezeroari bere eskaeran errore bat egon dela jakinarazteko erabiltzen da.</p> <ul> <li>500-599 - Zerbitzariaren Erroreak</li> </ul> <p>Zerbitzariaren aldean gertatzen diren erroreentza gordetzen da eta normalean zerbitzariak eskaera kudeatzean arazo handia duela adierazten du.</p>"},{"location":"oinarriak_mehatxuak/web_oinarriak/#goiburuak","title":"Goiburuak","text":"<p>Goiburuak web zerbitzarira eskaerak egiterakoan bidali ditzakezun datu gehigarri txikiak dira. Nahiz eta HTTP eskaera bat egiteko goiburu beharrezkoak ez diren, zaila izango da webgune bat behar bezala ikustea haiek gabe.</p> <p>Ohiko Eskaera Goiburuak</p> <p>Hauek bezeroak (normalean zure nabigatzaileak) zerbitzarira bidaltzen dituen goiburuak dira.</p> <ul> <li>Host: Web zerbitzari batzuek webgune bat baino gehiago ostatatzen dituzte, beraz host goiburua emanez zein nahi duzun esan diezaiokezu, bestela zerbitzariaren webgune lehenetsia jasoko duzu.</li> <li>User-Agent: Zure nabigatzailearen softwarea eta bertsio zenbakia da. Web zerbitzariari zure nabigatzailearen softwarea jakinarazteak webgunea zure nabigatzailearentzat behar bezala formateatzen laguntzen dio, eta HTML, JavaScript eta CSS elementu batzuk nabigatzaile jakin batzuetan bakarrik daude eskuragarri.</li> <li>Content-Length: Formulario batean bezala web zerbitzarira datuak bidaltzerakoan, eduki luzerak web zerbitzariari web eskaeran zenbat datu espero dituen esaten dio. Modu honetan zerbitzariak ziurtatu dezake ez duela daturik galdu.</li> <li>Accept-Encoding: Web zerbitzariari nabigatzaileak zein konpresio metodo onartzen dituen esaten dio, datuak txikiago egin ahal izateko internetez bidaltzerakoan.</li> <li>Cookie: Zure informazioa gogoratzeko zerbitzarira bidaltzen diren datuak (informazio gehiagorako ikusi cookie-en ataza).</li> </ul> <p>Ohiko Erantzun Goiburuak</p> <p>Hauek eskaera baten ondoren zerbitzariak bezeroari itzultzen dizkion goiburuak dira.</p> <ul> <li>Set-Cookie: Gorde beharreko informazioa, eskaera bakoitzean web zerbitzarira itzultzen dena (informazio gehiagorako ikusi cookie-en ataza).</li> <li>Cache-Control: Zenbat denboran gorde behar den erantzunaren edukia nabigatzailearen cache-an berriz eskatu aurretik.</li> <li>Content-Type: Bezeroari zer datu mota itzultzen ari den esaten dio: HTML, CSS, JavaScript, irudiak, PDF, bideoa, etab. Content-type goiburua erabiliz nabigatzaileak dakite nola prozesatu datuak.</li> <li>Content-Encoding: Zer metodo erabili den datuak konprimitzeko internetez bidaltzerakoan txikiago egiteko.</li> </ul> <p>Praktikan, goiburu hauek ikusezinak dira zure nabigatzailearentzat, baina funtsezko informazioa ematen diote zerbitzariari nola kudeatu eskaera. </p> <p>Adibidez, User-Agent goiburuagatik webgune bat ezberdin ikus daiteke mugikor batean eta ordenagailu batean.</p>"},{"location":"oinarriak_mehatxuak/web_oinarriak/#cookie-ak","title":"Cookie-ak","text":"<p>Cookieak zure ordenagailuan gordetzen diren datu txiki bat besterik ez dira. Cookieak gorde egiten dira web zerbitzari batetik \"Set-Cookie\" goiburua jasotzen duzunean. Ondoren egingo dituzun eskaera guztietan, cookie datuak itzuli egingo dizkiozu web zerbitzariari. HTTP estaturik gabea delako (ez ditu zure aurreko eskaerak gogoratzen), cookieak web zerbitzariari zu nor zaren gogorarazteko erabil daitezke, webgunearentzako ezarpen pertsonal batzuk gordetzeko edo webgune hartan lehenago egon zaren jakiteko.</p>"},{"location":"oinarriak_mehatxuak/web_oinarriak/#nola-funtzionatzen-dute-webguneek","title":"Nola funtzionatzen dute webguneek?","text":"<p>Webgune batera joaten zarenean, zure nabigatzaileak (Safari edo Google Chrome bezala) web zerbitzari batera eskaera bat egiten du bisitatzen ari zaren orriaren informazioa eskatuz. Zerbitzariak zure nabigatzaileak orria erakusteko erabiliko dituen datuak bidaltzen ditu erantzunez. Web zerbitzari bat munduko beste nonbait dagoen ordenagailu dedikatu bat besterik ez da, zure eskaerak kudeatzen dituena.</p> <p></p> <p>Frontend vs Backend: Frontend-a bezeroaren nabigatzailean ikusten den zatia da (HTML, CSS, JS), eta Backend-a zerbitzarian exekutatzen dena (PHP, Node.js...). Edukia estatikoa edo dinamikoa izan daiteke, eta zerbitzariak Virtual Host bidez hainbat webgune kudea ditzake.</p> <p>Zure nabigatzaileak web zerbitzari batera eskaera bat egitean beste prozesu asko daude inplikatuta, baina oraingoz ulertu behar duzuna da zerbitzari batera eskaera bat egiten duzula, eta honek zure nabigatzaileak informazioa erakusteko erabiliko dituen datuak bidaltzen dizkizula erantzunez.</p> <p>HTML, CSS eta JavaScript dira web orrien oinarrizko teknologiak. HTML egiturarako, CSS itxurarako eta JavaScript interaktibitatearako erabiltzen dira. Elementuek atributuak dituzte (id, class, src...), eta erabiltzailearen sarrera baliatzen badute, arriskutsuak izan daitezke baldin eta ez badira behar bezala iragazten.</p> <p>Datu sentikorraren esposizioa askotan gertatzen da frontend kodean (komentarioetan, JavaScript fitxategietan...) pasahitz, token edo esteka pribatuak uzten direnean. HTML injekzioa bezalako ahultasunak sor daitezke erabiltzailearen sarrera iragazten ez denean eta zuzenean orrian bistaratzen denean.</p> <p>Nabigatzailearen garatzaile tresnak (Developer Tools) erabilgarriak dira eskaerak, cookie-ak, kodea eta segurtasunaren ikuspegitik informazioa aztertzeko. Inspector, Network, Debugger... panelak eskura ditugu.</p>"},{"location":"oinarriak_mehatxuak/web_oinarriak/#beste-osagai-garrantzitsu-batzuk","title":"Beste osagai garrantzitsu batzuk:","text":"<p>CDN-ak</p> <p>CDN bat baliabide bikaina izan daiteke webgune okupatu baten trafikoa murrizteko. Zure webguneko fitxategi estatikoak ostatu ditzakezu, JavaScript, CSS, irudiak, bideoak bezala, eta munduan zehar dauden milaka zerbitzarietan ostatu. Erabiltzaile batek ostatutako fitxategietako bat eskatzen duenean, CDN-ak zein den gertuena dagoen zerbitzaria fisikoki kokatuta kalkulatzen du eta eskaera horra bidaltzen du munduko beste aldearen ordez.</p> <p>Karga banatzaileak</p> <p>Webgune baten trafikoa handia bihurtzen hasten denean edo eskuragarritasun altua behar duen aplikazio bat exekutatzen denean, web zerbitzari bakar bat agian ez da nahikoa izango. </p> <p>Karga banatzaile bat duen webgune bat eskatzen duzunean, karga banatzaileak zure eskaera jasoko du lehenik eta ondoren atzean dauden zerbitzari anitzetan batera bidaliko du. </p> <p>Karga banatzaileak algoritmo ezberdinak erabiltzen ditu zein zerbitzari egokien den eskaera kudeatzeko erabakitzeko. </p> <p>WAF-ak (Web Application Firewall)</p> <p>Eskaera gaiztoak detektatu eta blokeatzeko.</p> <p>Datu-baseak</p> <p>WAF bat zure web eskeararen eta web zerbitzariaren artean kokatzen da; bere helburu nagusia web zerbitzaria hacking edo zerbitzua ukatzeko erasoetatik babestea da. </p> <p></p>"},{"location":"oinarriak_mehatxuak/web_oinarriak/#hurrengo-urratsak","title":"Hurrengo urratsak","text":"<ul> <li>Web ahultasun arrunten ikuspegi orokorra</li> <li>Atzera itzuli hasierara</li> </ul>"}]}